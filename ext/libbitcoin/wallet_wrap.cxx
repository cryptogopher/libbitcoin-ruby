/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGRUBY
#define SWIGRUBY
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ANYARGS) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT", swig_ruby_trackings_count, NULL);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    if (TYPE(object) != T_DATA)
      abort();
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(void* ptr, VALUE obj, void(*meth)(void* ptr, VALUE obj)) {
  (*meth)(ptr, obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings, (int (*)(ANYARGS))&swig_ruby_internal_iterate_callback, (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (obj) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_binary swig_types[0]
#define SWIGTYPE_p_bool swig_types[1]
#define SWIGTYPE_p_boost__system__error_code swig_types[2]
#define SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t swig_types[3]
#define SWIGTYPE_p_byte_arrayT_1u_short_hash_size_checksum_size_t swig_types[4]
#define SWIGTYPE_p_byte_arrayT_24_t swig_types[5]
#define SWIGTYPE_p_byte_arrayT_32_t swig_types[6]
#define SWIGTYPE_p_byte_arrayT_37u_t swig_types[7]
#define SWIGTYPE_p_byte_arrayT_43_t swig_types[8]
#define SWIGTYPE_p_byte_arrayT_4_t swig_types[9]
#define SWIGTYPE_p_byte_arrayT_53_t swig_types[10]
#define SWIGTYPE_p_byte_arrayT_55_t swig_types[11]
#define SWIGTYPE_p_byte_arrayT_82_t swig_types[12]
#define SWIGTYPE_p_byte_arrayT_8_t swig_types[13]
#define SWIGTYPE_p_byte_arrayT_wif_uncompressed_size_1u_t swig_types[14]
#define SWIGTYPE_p_chain__points_value swig_types[15]
#define SWIGTYPE_p_chain__script swig_types[16]
#define SWIGTYPE_p_char swig_types[17]
#define SWIGTYPE_p_config__checkpoint swig_types[18]
#define SWIGTYPE_p_data_chunk swig_types[19]
#define SWIGTYPE_p_data_slice swig_types[20]
#define SWIGTYPE_p_ec_compressed swig_types[21]
#define SWIGTYPE_p_ec_public swig_types[22]
#define SWIGTYPE_p_ec_secret swig_types[23]
#define SWIGTYPE_p_ec_uncompressed swig_types[24]
#define SWIGTYPE_p_encrypted_private swig_types[25]
#define SWIGTYPE_p_encrypted_public swig_types[26]
#define SWIGTYPE_p_encrypted_token swig_types[27]
#define SWIGTYPE_p_hash_digest swig_types[28]
#define SWIGTYPE_p_int32_t swig_types[29]
#define SWIGTYPE_p_int64_t swig_types[30]
#define SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri swig_types[31]
#define SWIGTYPE_p_libbitcoin__wallet__ec_private swig_types[32]
#define SWIGTYPE_p_libbitcoin__wallet__ec_public swig_types[33]
#define SWIGTYPE_p_libbitcoin__wallet__ek_private swig_types[34]
#define SWIGTYPE_p_libbitcoin__wallet__ek_public swig_types[35]
#define SWIGTYPE_p_libbitcoin__wallet__ek_token swig_types[36]
#define SWIGTYPE_p_libbitcoin__wallet__hd_lineage swig_types[37]
#define SWIGTYPE_p_libbitcoin__wallet__hd_private swig_types[38]
#define SWIGTYPE_p_libbitcoin__wallet__hd_public swig_types[39]
#define SWIGTYPE_p_libbitcoin__wallet__payment_address swig_types[40]
#define SWIGTYPE_p_libbitcoin__wallet__select_outputs swig_types[41]
#define SWIGTYPE_p_libbitcoin__wallet__stealth_address swig_types[42]
#define SWIGTYPE_p_libbitcoin__wallet__stealth_receiver swig_types[43]
#define SWIGTYPE_p_libbitcoin__wallet__stealth_sender swig_types[44]
#define SWIGTYPE_p_libbitcoin__wallet__uri swig_types[45]
#define SWIGTYPE_p_libbitcoin__wallet__uri_reader swig_types[46]
#define SWIGTYPE_p_libbitcoin__wallet__wrapped_data swig_types[47]
#define SWIGTYPE_p_long_hash swig_types[48]
#define SWIGTYPE_p_payment_address swig_types[49]
#define SWIGTYPE_p_point_list swig_types[50]
#define SWIGTYPE_p_ptr swig_types[51]
#define SWIGTYPE_p_query_map swig_types[52]
#define SWIGTYPE_p_short_hash swig_types[53]
#define SWIGTYPE_p_std__arrayT_char_const_p_2048_t swig_types[54]
#define SWIGTYPE_p_std__error_code swig_types[55]
#define SWIGTYPE_p_std__error_condition swig_types[56]
#define SWIGTYPE_p_std__functionT_void_fstd__error_code_const_RF_t swig_types[57]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[58]
#define SWIGTYPE_p_std__string swig_types[59]
#define SWIGTYPE_p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t swig_types[60]
#define SWIGTYPE_p_stealth_address swig_types[61]
#define SWIGTYPE_p_string_list swig_types[62]
#define SWIGTYPE_p_uint16_t swig_types[63]
#define SWIGTYPE_p_uint32_t swig_types[64]
#define SWIGTYPE_p_uint64_t swig_types[65]
#define SWIGTYPE_p_uint8_t swig_types[66]
static swig_type_info *swig_types[68];
static swig_module_info swig_module = {swig_types, 67, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_libbitcoin
#define SWIG_name    "Libbitcoin"

static VALUE mLibbitcoin;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


//#include "bitcoin/bitcoin.hpp"
#include "bitcoin/bitcoin/compat.hpp"
#include "bitcoin/bitcoin/constants.hpp"
#include "bitcoin/bitcoin/define.hpp"
#include "bitcoin/bitcoin/error.hpp"
#include "bitcoin/bitcoin/handlers.hpp"
#include "bitcoin/bitcoin/version.hpp"

#include "bitcoin/bitcoin/wallet/uri.hpp"
#include "bitcoin/bitcoin/wallet/uri_reader.hpp"
#include "bitcoin/bitcoin/wallet/payment_address.hpp"
#include "bitcoin/bitcoin/wallet/bitcoin_uri.hpp"
#include "bitcoin/bitcoin/wallet/dictionary.hpp"
#include "bitcoin/bitcoin/wallet/ec_private.hpp"
#include "bitcoin/bitcoin/wallet/ec_public.hpp"
#include "bitcoin/bitcoin/wallet/ek_private.hpp"
#include "bitcoin/bitcoin/wallet/ek_public.hpp"
#include "bitcoin/bitcoin/wallet/ek_token.hpp"
#include "bitcoin/bitcoin/wallet/encrypted_keys.hpp"
#include "bitcoin/bitcoin/wallet/hd_public.hpp"
#include "bitcoin/bitcoin/wallet/hd_private.hpp"
#include "bitcoin/bitcoin/wallet/message.hpp"
#include "bitcoin/bitcoin/wallet/mini_keys.hpp"
#include "bitcoin/bitcoin/wallet/mnemonic.hpp"
#include "bitcoin/bitcoin/wallet/qrcode.hpp"
#include "bitcoin/bitcoin/wallet/select_outputs.hpp"
#include "bitcoin/bitcoin/wallet/stealth_address.hpp"
#include "bitcoin/bitcoin/wallet/stealth_receiver.hpp"
#include "bitcoin/bitcoin/wallet/stealth_sender.hpp"

using namespace libbitcoin;
using namespace libbitcoin::wallet;


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE VALUE 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return ULL2NUM(value);
}
#endif


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig/3.0.12/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}

SWIGINTERN VALUE
_wrap_min_int64_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::min_int64), SWIGTYPE_p_int64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_int64_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::max_int64), SWIGTYPE_p_int64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_min_int32_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::min_int32), SWIGTYPE_p_int32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_int32_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::max_int32), SWIGTYPE_p_int32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_uint64_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::max_uint64), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_uint32_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::max_uint32), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_uint16_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::max_uint16), SWIGTYPE_p_uint16_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_uint8_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::max_uint8), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_size_t_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::max_size_t), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_byte_bits_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::byte_bits), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_no_previous_output_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::no_previous_output), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_input_sequence_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::max_input_sequence), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_sighash_null_value_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::sighash_null_value), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_counted_ops_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_counted_ops));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_stack_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_stack_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_script_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_script_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_push_data_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_push_data_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_script_public_keys_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_script_public_keys));
  return _val;
}


SWIGINTERN VALUE
_wrap_multisig_default_sigops_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::multisig_default_sigops));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_number_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_number_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_check_locktime_verify_number_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_check_locktime_verify_number_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_check_sequence_verify_number_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_check_sequence_verify_number_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_null_data_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_null_data_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_min_coinbase_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::min_coinbase_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_coinbase_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_coinbase_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_coinbase_maturity_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::coinbase_maturity));
  return _val;
}


SWIGINTERN VALUE
_wrap_median_time_past_interval_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::median_time_past_interval));
  return _val;
}


SWIGINTERN VALUE
_wrap_locktime_threshold_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::locktime_threshold));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_block_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_block_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_sigops_factor_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_sigops_factor));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_block_sigops_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_block_sigops));
  return _val;
}


SWIGINTERN VALUE
_wrap_relative_locktime_min_version_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::relative_locktime_min_version));
  return _val;
}


SWIGINTERN VALUE
_wrap_relative_locktime_seconds_shift_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::relative_locktime_seconds_shift));
  return _val;
}


SWIGINTERN VALUE
_wrap_relative_locktime_mask_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::relative_locktime_mask), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_relative_locktime_disabled_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::relative_locktime_disabled), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_relative_locktime_time_locked_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::relative_locktime_time_locked), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_retargeting_factor_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::retargeting_factor), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_easy_spacing_seconds_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::easy_spacing_seconds), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_target_spacing_seconds_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::target_spacing_seconds), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_target_timespan_seconds_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::target_timespan_seconds), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_timestamp_future_seconds_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::timestamp_future_seconds), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_retarget_proof_of_work_limit_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::retarget_proof_of_work_limit), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_no_retarget_proof_of_work_limit_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::no_retarget_proof_of_work_limit), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_work_limit__SWIG_0(int argc, VALUE *argv, VALUE self) {
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_bool(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bool","libbitcoin::work_limit", 1, argv[0] ));
  } 
  arg1 = static_cast< bool >(val1);
  result = libbitcoin::work_limit(arg1);
  vresult = SWIG_NewPointerObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_work_limit__SWIG_1(int argc, VALUE *argv, VALUE self) {
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = libbitcoin::work_limit();
  vresult = SWIG_NewPointerObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_work_limit(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_work_limit__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_work_limit__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "work_limit", 
    "    uint32_t work_limit(bool retarget)\n"
    "    uint32_t work_limit()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_min_timespan_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::min_timespan), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_max_timespan_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::max_timespan), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_retargeting_interval_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::retargeting_interval));
  return _val;
}


SWIGINTERN VALUE
_wrap_first_version_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::first_version));
  return _val;
}


SWIGINTERN VALUE
_wrap_bip34_version_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::bip34_version));
  return _val;
}


SWIGINTERN VALUE
_wrap_bip66_version_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::bip66_version));
  return _val;
}


SWIGINTERN VALUE
_wrap_bip65_version_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::bip65_version));
  return _val;
}


SWIGINTERN VALUE
_wrap_bip9_version_bit0_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::bip9_version_bit0), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_bip9_version_bit1_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::bip9_version_bit1), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_bip9_version_base_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::bip9_version_base), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_active_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::mainnet_active));
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_enforce_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::mainnet_enforce));
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_sample_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::mainnet_sample));
  return _val;
}


SWIGINTERN VALUE
_wrap_testnet_active_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::testnet_active));
  return _val;
}


SWIGINTERN VALUE
_wrap_testnet_enforce_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::testnet_enforce));
  return _val;
}


SWIGINTERN VALUE
_wrap_testnet_sample_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::testnet_sample));
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_bip65_freeze_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::mainnet_bip65_freeze));
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_bip66_freeze_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::mainnet_bip66_freeze));
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_bip34_freeze_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::mainnet_bip34_freeze));
  return _val;
}


SWIGINTERN VALUE
_wrap_testnet_bip65_freeze_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::testnet_bip65_freeze));
  return _val;
}


SWIGINTERN VALUE
_wrap_testnet_bip66_freeze_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::testnet_bip66_freeze));
  return _val;
}


SWIGINTERN VALUE
_wrap_testnet_bip34_freeze_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::testnet_bip34_freeze));
  return _val;
}


SWIGINTERN VALUE
_wrap_regtest_bip65_freeze_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::regtest_bip65_freeze));
  return _val;
}


SWIGINTERN VALUE
_wrap_regtest_bip66_freeze_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::regtest_bip66_freeze));
  return _val;
}


SWIGINTERN VALUE
_wrap_regtest_bip34_freeze_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::regtest_bip34_freeze));
  return _val;
}


SWIGINTERN VALUE
_wrap_bip16_activation_time_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::bip16_activation_time), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_bip16_exception_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::mainnet_bip16_exception_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_bip30_exception_checkpoint1_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::mainnet_bip30_exception_checkpoint1), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_bip30_exception_checkpoint2_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::mainnet_bip30_exception_checkpoint2), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_bip34_active_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::mainnet_bip34_active_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_testnet_bip34_active_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::testnet_bip34_active_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_regtest_bip34_active_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::regtest_bip34_active_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_bip9_bit0_active_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::mainnet_bip9_bit0_active_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_testnet_bip9_bit0_active_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::testnet_bip9_bit0_active_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_regtest_bip9_bit0_active_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::regtest_bip9_bit0_active_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_mainnet_bip9_bit1_active_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::mainnet_bip9_bit1_active_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_testnet_bip9_bit1_active_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::testnet_bip9_bit1_active_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_regtest_bip9_bit1_active_checkpoint_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::regtest_bip9_bit1_active_checkpoint), SWIGTYPE_p_config__checkpoint,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_command_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::command_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_address_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_address));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_filter_add_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_filter_add));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_filter_functions_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_filter_functions));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_filter_load_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_filter_load));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_get_blocks_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_get_blocks));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_get_headers_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_get_headers));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_get_data_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_get_data));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_inventory_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_inventory));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_locator_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_locator));
  return _val;
}


SWIGINTERN VALUE
_wrap_varint_two_bytes_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::varint_two_bytes), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_varint_four_bytes_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::varint_four_bytes), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_varint_eight_bytes_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::varint_eight_bytes), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_string_terminator_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::string_terminator), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_witness_marker_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::witness_marker), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_witness_flag_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::witness_flag), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_witness_head_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::witness_head), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_fast_sigops_factor_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::fast_sigops_factor));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_fast_sigops_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_fast_sigops));
  return _val;
}


SWIGINTERN VALUE
_wrap_light_weight_factor_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::light_weight_factor));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_block_weight_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_block_weight));
  return _val;
}


SWIGINTERN VALUE
_wrap_base_size_contribution_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::base_size_contribution));
  return _val;
}


SWIGINTERN VALUE
_wrap_total_size_contribution_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::total_size_contribution));
  return _val;
}


SWIGINTERN VALUE
_wrap_min_witness_program_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::min_witness_program));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_witness_program_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::max_witness_program));
  return _val;
}


SWIGINTERN VALUE
_wrap_max_money_recursive(int argc, VALUE *argv, VALUE self) {
  uint64_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint64_t","libbitcoin::max_money_recursive", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","libbitcoin::max_money_recursive", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< uint64_t * >(argp1));
    }
  }
  result = libbitcoin::max_money_recursive(arg1);
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_satoshi_per_bitcoin_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::satoshi_per_bitcoin), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_bitcoin_to_satoshi__SWIG_0(int argc, VALUE *argv, VALUE self) {
  uint64_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint64_t","libbitcoin::bitcoin_to_satoshi", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","libbitcoin::bitcoin_to_satoshi", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< uint64_t * >(argp1));
    }
  }
  result = libbitcoin::bitcoin_to_satoshi(arg1);
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_to_satoshi__SWIG_1(int argc, VALUE *argv, VALUE self) {
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = libbitcoin::bitcoin_to_satoshi();
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_bitcoin_to_satoshi(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_bitcoin_to_satoshi__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_uint64_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_bitcoin_to_satoshi__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "bitcoin_to_satoshi", 
    "    uint64_t bitcoin_to_satoshi(uint64_t bitcoin_uints)\n"
    "    uint64_t bitcoin_to_satoshi()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_initial_block_subsidy_bitcoin_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::initial_block_subsidy_bitcoin), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_initial_block_subsidy_satoshi(int argc, VALUE *argv, VALUE self) {
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = libbitcoin::initial_block_subsidy_satoshi();
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_recursive_money_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::recursive_money), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_retarget_subsidy_interval_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::retarget_subsidy_interval), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_no_retarget_subsidy_interval_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::no_retarget_subsidy_interval), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_subsidy_interval__SWIG_0(int argc, VALUE *argv, VALUE self) {
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_bool(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bool","libbitcoin::subsidy_interval", 1, argv[0] ));
  } 
  arg1 = static_cast< bool >(val1);
  result = libbitcoin::subsidy_interval(arg1);
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_subsidy_interval__SWIG_1(int argc, VALUE *argv, VALUE self) {
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = libbitcoin::subsidy_interval();
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_subsidy_interval(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_subsidy_interval__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_subsidy_interval__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "subsidy_interval", 
    "    uint64_t subsidy_interval(bool retarget)\n"
    "    uint64_t subsidy_interval()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_max_money__SWIG_0(int argc, VALUE *argv, VALUE self) {
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_bool(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bool","libbitcoin::max_money", 1, argv[0] ));
  } 
  arg1 = static_cast< bool >(val1);
  result = libbitcoin::max_money(arg1);
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_max_money__SWIG_1(int argc, VALUE *argv, VALUE self) {
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = libbitcoin::max_money();
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_max_money(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_max_money__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_max_money__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "max_money", 
    "    uint64_t max_money(bool retarget)\n"
    "    uint64_t max_money()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_make_error_code(int argc, VALUE *argv, VALUE self) {
  libbitcoin::error::error_code_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  libbitcoin::code result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "libbitcoin::error::error_code_t","libbitcoin::error::make_error_code", 1, argv[0] ));
  } 
  arg1 = static_cast< libbitcoin::error::error_code_t >(val1);
  result = libbitcoin::error::make_error_code(arg1);
  vresult = SWIG_NewPointerObj((new libbitcoin::code(static_cast< const libbitcoin::code& >(result))), SWIGTYPE_p_std__error_code, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_make_error_condition(int argc, VALUE *argv, VALUE self) {
  libbitcoin::error::error_condition_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::error_condition result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "libbitcoin::error::error_condition_t","libbitcoin::error::make_error_condition", 1, argv[0] ));
  } 
  arg1 = static_cast< libbitcoin::error::error_condition_t >(val1);
  result = libbitcoin::error::make_error_condition(arg1);
  vresult = SWIG_NewPointerObj((new std::error_condition(static_cast< const std::error_condition& >(result))), SWIGTYPE_p_std__error_condition, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_boost_to_error_code(int argc, VALUE *argv, VALUE self) {
  libbitcoin::boost_code *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::error::error_code_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_boost__system__error_code,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::boost_code const &","libbitcoin::error::boost_to_error_code", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::boost_code const &","libbitcoin::error::boost_to_error_code", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::boost_code * >(argp1);
  result = (libbitcoin::error::error_code_t)libbitcoin::error::boost_to_error_code((boost::system::error_code const &)*arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_posix_to_error_code(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  libbitcoin::error::error_code_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","libbitcoin::error::posix_to_error_code", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (libbitcoin::error::error_code_t)libbitcoin::error::posix_to_error_code(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassUri;

SWIGINTERN VALUE
_wrap_uri_decode__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","decode", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","decode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","decode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","decode", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->decode((std::string const &)*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_decode__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","decode", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","decode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","decode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->decode((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_uri_decode(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__uri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_uri_decode__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__uri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_uri_decode__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "uri.decode", 
    "    bool uri.decode(std::string const &encoded, bool strict)\n"
    "    bool uri.decode(std::string const &encoded)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = ((libbitcoin::wallet::uri const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_scheme(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","scheme", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = ((libbitcoin::wallet::uri const *)arg1)->scheme();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_set_scheme(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","set_scheme", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_scheme", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_scheme", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->set_scheme((std::string const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_authority(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","authority", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = ((libbitcoin::wallet::uri const *)arg1)->authority();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_has_authority(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","has_authority", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = (bool)((libbitcoin::wallet::uri const *)arg1)->has_authority();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_set_authority(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","set_authority", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_authority", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_authority", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->set_authority((std::string const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_remove_authority(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","remove_authority", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  (arg1)->remove_authority();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_path(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","path", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = ((libbitcoin::wallet::uri const *)arg1)->path();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_set_path(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","set_path", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_path", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_path", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->set_path((std::string const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_query(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","query", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = ((libbitcoin::wallet::uri const *)arg1)->query();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_has_query(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","has_query", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = (bool)((libbitcoin::wallet::uri const *)arg1)->has_query();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_set_query(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","set_query", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_query", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_query", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->set_query((std::string const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_remove_query(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","remove_query", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  (arg1)->remove_query();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_fragment(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","fragment", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = ((libbitcoin::wallet::uri const *)arg1)->fragment();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_has_fragment(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","has_fragment", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = (bool)((libbitcoin::wallet::uri const *)arg1)->has_fragment();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_set_fragment(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","set_fragment", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_fragment", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_fragment", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->set_fragment((std::string const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_remove_fragment(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","remove_fragment", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  (arg1)->remove_fragment();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_decode_query(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::uri::query_map result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri const *","decode_query", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  result = ((libbitcoin::wallet::uri const *)arg1)->decode_query();
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::uri::query_map(static_cast< const libbitcoin::wallet::uri::query_map& >(result))), SWIGTYPE_p_std__mapT_std__string_std__string_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_encode_query(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *) 0 ;
  libbitcoin::wallet::uri::query_map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri *","encode_query", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__mapT_std__string_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri::query_map const &","encode_query", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::uri::query_map const &","encode_query", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::uri::query_map * >(argp2);
  (arg1)->encode_query((libbitcoin::wallet::uri::query_map const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_uri_allocate(VALUE self)
#else
_wrap_uri_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__uri);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_uri(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::uri *)new libbitcoin::wallet::uri();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_uri(void *self) {
    libbitcoin::wallet::uri *arg1 = (libbitcoin::wallet::uri *)self;
    delete arg1;
}

static swig_class SwigClassUri_reader;

SWIGINTERN VALUE
_wrap_uri_reader_set_strict(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri_reader *arg1 = (libbitcoin::wallet::uri_reader *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri_reader *","set_strict", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri_reader * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","set_strict", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_strict(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_reader_set_scheme(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri_reader *arg1 = (libbitcoin::wallet::uri_reader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri_reader *","set_scheme", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri_reader * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_scheme", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_scheme", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->set_scheme((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_reader_set_authority(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri_reader *arg1 = (libbitcoin::wallet::uri_reader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri_reader *","set_authority", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri_reader * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_authority", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_authority", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->set_authority((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_reader_set_path(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri_reader *arg1 = (libbitcoin::wallet::uri_reader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri_reader *","set_path", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri_reader * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_path", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_path", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->set_path((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_reader_set_fragment(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri_reader *arg1 = (libbitcoin::wallet::uri_reader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri_reader *","set_fragment", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri_reader * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_fragment", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_fragment", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->set_fragment((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_uri_reader_set_parameter(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::uri_reader *arg1 = (libbitcoin::wallet::uri_reader *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__uri_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::uri_reader *","set_parameter", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::uri_reader * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_parameter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_parameter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::string const &","set_parameter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_parameter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  result = (bool)(arg1)->set_parameter((std::string const &)*arg2,(std::string const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_uri_reader(void *self) {
    libbitcoin::wallet::uri_reader *arg1 = (libbitcoin::wallet::uri_reader *)self;
    delete arg1;
}

static swig_class SwigClassBitcoin_uri;

SWIGINTERN VALUE
_wrap_new_bitcoin_uri__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::bitcoin_uri *)new libbitcoin::wallet::bitcoin_uri();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_bitcoin_uri__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::bitcoin_uri *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const &","bitcoin_uri", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::bitcoin_uri const &","bitcoin_uri", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = (libbitcoin::wallet::bitcoin_uri *)new libbitcoin::wallet::bitcoin_uri((libbitcoin::wallet::bitcoin_uri const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_bitcoin_uri__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  libbitcoin::wallet::bitcoin_uri *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","bitcoin_uri", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","bitcoin_uri", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","bitcoin_uri", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (libbitcoin::wallet::bitcoin_uri *)new libbitcoin::wallet::bitcoin_uri((std::string const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_bitcoin_uri_allocate(VALUE self)
#else
_wrap_bitcoin_uri_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_bitcoin_uri__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::bitcoin_uri *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","bitcoin_uri", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","bitcoin_uri", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::bitcoin_uri *)new libbitcoin::wallet::bitcoin_uri((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_bitcoin_uri(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_bitcoin_uri__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_bitcoin_uri__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_bitcoin_uri__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_bitcoin_uri__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "bitcoin_uri.new", 
    "    bitcoin_uri.new()\n"
    "    bitcoin_uri.new(libbitcoin::wallet::bitcoin_uri const &other)\n"
    "    bitcoin_uri.new(std::string const &uri, bool strict)\n"
    "    bitcoin_uri.new(std::string const &uri)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::bitcoin_uri.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_bitcoin_uri___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  libbitcoin::wallet::bitcoin_uri *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::bitcoin_uri const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp2);
  result = (bool)((libbitcoin::wallet::bitcoin_uri const *)arg1)->operator <((libbitcoin::wallet::bitcoin_uri const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::bitcoin_uri.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_bitcoin_uri___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  libbitcoin::wallet::bitcoin_uri *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::bitcoin_uri const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp2);
  result = (bool)((libbitcoin::wallet::bitcoin_uri const *)arg1)->operator ==((libbitcoin::wallet::bitcoin_uri const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = (bool)((libbitcoin::wallet::bitcoin_uri const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = ((libbitcoin::wallet::bitcoin_uri const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_amount(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","amount", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = ((libbitcoin::wallet::bitcoin_uri const *)arg1)->amount();
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_label(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","label", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = ((libbitcoin::wallet::bitcoin_uri const *)arg1)->label();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_message(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","message", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = ((libbitcoin::wallet::bitcoin_uri const *)arg1)->message();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_r(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = ((libbitcoin::wallet::bitcoin_uri const *)arg1)->r();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_address(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = ((libbitcoin::wallet::bitcoin_uri const *)arg1)->address();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_payment(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","payment", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = ((libbitcoin::wallet::bitcoin_uri const *)arg1)->payment();
  vresult = SWIG_NewPointerObj((new payment_address(static_cast< const payment_address& >(result))), SWIGTYPE_p_payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_stealth(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  stealth_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","stealth", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  result = ((libbitcoin::wallet::bitcoin_uri const *)arg1)->stealth();
  vresult = SWIG_NewPointerObj((new stealth_address(static_cast< const stealth_address& >(result))), SWIGTYPE_p_stealth_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_parameter(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri const *","parameter", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","parameter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","parameter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = ((libbitcoin::wallet::bitcoin_uri const *)arg1)->parameter((std::string const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_amount(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_amount", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint64_t","set_amount", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","set_amount", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint64_t * >(argp2));
    }
  }
  (arg1)->set_amount(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_label(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_label", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_label", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_label", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->set_label((std::string const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_message(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_message", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_message", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_message", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->set_message((std::string const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_r(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_r", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_r", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_r", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->set_r((std::string const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_address__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_address", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_address", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->set_address((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_address__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  payment_address *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_payment_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "payment_address const &","set_address", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "payment_address const &","set_address", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< payment_address * >(argp2);
  (arg1)->set_address((payment_address const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_address__SWIG_2(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  stealth_address *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_stealth_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "stealth_address const &","set_address", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "stealth_address const &","set_address", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< stealth_address * >(argp2);
  (arg1)->set_address((stealth_address const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_bitcoin_uri_set_address(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bitcoin_uri_set_address__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_payment_address, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bitcoin_uri_set_address__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stealth_address, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_bitcoin_uri_set_address__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "bitcoin_uri.set_address", 
    "    bool bitcoin_uri.set_address(std::string const &address)\n"
    "    void bitcoin_uri.set_address(payment_address const &payment)\n"
    "    void bitcoin_uri.set_address(stealth_address const &stealth)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_strict(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_strict", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","set_strict", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_strict(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_scheme(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_scheme", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_scheme", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_scheme", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->set_scheme((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_authority(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_authority", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_authority", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_authority", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->set_authority((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_path(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_path", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_path", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_path", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->set_path((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_fragment(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_fragment", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_fragment", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_fragment", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)(arg1)->set_fragment((std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bitcoin_uri_set_parameter(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::bitcoin_uri *","set_parameter", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::bitcoin_uri * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","set_parameter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_parameter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::string const &","set_parameter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","set_parameter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  result = (bool)(arg1)->set_parameter((std::string const &)*arg2,(std::string const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_bitcoin_uri(void *self) {
    libbitcoin::wallet::bitcoin_uri *arg1 = (libbitcoin::wallet::bitcoin_uri *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_dictionary_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::dictionary_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_en_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::en), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_es_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::es), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ja_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::ja), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_it_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::it), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_fr_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::fr), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_cs_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::cs), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ru_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::ru), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_uk_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::uk), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_zh_Hans_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::zh_Hans), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_zh_Hant_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::zh_Hant), SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_all_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::language::all), SWIGTYPE_p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_wif_uncompressed_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::wif_uncompressed_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_wif_compressed_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::wif_compressed_size));
  return _val;
}


static swig_class SwigClassEc_private;

SWIGINTERN VALUE
_wrap_ec_private_compressed_sentinel_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_private::compressed_sentinel), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_private_mainnet_wif_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_private::mainnet_wif), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_private_mainnet_p2kh_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_private::mainnet_p2kh), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_private_mainnet_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_private::mainnet), SWIGTYPE_p_uint16_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_private_testnet_wif_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_private::testnet_wif), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_private_testnet_p2kh_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_private::testnet_p2kh), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_private_testnet_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_private::testnet), SWIGTYPE_p_uint16_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_private_to_address_prefix(int argc, VALUE *argv, VALUE self) {
  uint16_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint16_t","libbitcoin::wallet::ec_private::to_address_prefix", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint16_t","libbitcoin::wallet::ec_private::to_address_prefix", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< uint16_t * >(argp1));
    }
  }
  result = libbitcoin::wallet::ec_private::to_address_prefix(arg1);
  vresult = SWIG_NewPointerObj((new uint8_t(static_cast< const uint8_t& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_to_wif_prefix(int argc, VALUE *argv, VALUE self) {
  uint16_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint16_t","libbitcoin::wallet::ec_private::to_wif_prefix", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint16_t","libbitcoin::wallet::ec_private::to_wif_prefix", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< uint16_t * >(argp1));
    }
  }
  result = libbitcoin::wallet::ec_private::to_wif_prefix(arg1);
  vresult = SWIG_NewPointerObj((new uint8_t(static_cast< const uint8_t& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_to_version(int argc, VALUE *argv, VALUE self) {
  uint8_t arg1 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  uint16_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::ec_private::to_version", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::ec_private::to_version", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< uint8_t * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::ec_private::to_version", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::ec_private::to_version", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = libbitcoin::wallet::ec_private::to_version(arg1,arg2);
  vresult = SWIG_NewPointerObj((new uint16_t(static_cast< const uint16_t& >(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__ec_private,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_private const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((libbitcoin::wallet::ec_private const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","ec_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","ec_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((std::string const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_4(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wif_compressed *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_wif_uncompressed_size_1u_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wif_compressed const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::wif_compressed const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wif_compressed * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","ec_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","ec_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((libbitcoin::wallet::wif_compressed const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_5(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wif_compressed *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_wif_uncompressed_size_1u_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wif_compressed const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::wif_compressed const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wif_compressed * >(argp1);
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((libbitcoin::wallet::wif_compressed const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_6(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wif_uncompressed *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_37u_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wif_uncompressed const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::wif_uncompressed const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wif_uncompressed * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","ec_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","ec_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((libbitcoin::wallet::wif_uncompressed const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_7(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wif_uncompressed *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_37u_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wif_uncompressed const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::wif_uncompressed const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wif_uncompressed * >(argp1);
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((libbitcoin::wallet::wif_uncompressed const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_8(int argc, VALUE *argv, VALUE self) {
  ec_secret *arg1 = 0 ;
  uint16_t arg2 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_secret const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_secret * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint16_t","ec_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint16_t","ec_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint16_t * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","ec_private", 3, argv[2] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((ec_secret const &)*arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_9(int argc, VALUE *argv, VALUE self) {
  ec_secret *arg1 = 0 ;
  uint16_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_secret const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_secret * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint16_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint16_t","ec_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint16_t","ec_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint16_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((ec_secret const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ec_private_allocate(VALUE self)
#else
_wrap_ec_private_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__ec_private);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ec_private__SWIG_10(int argc, VALUE *argv, VALUE self) {
  ec_secret *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_secret const &","ec_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","ec_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_secret * >(argp1);
  result = (libbitcoin::wallet::ec_private *)new libbitcoin::wallet::ec_private((ec_secret const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ec_private(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ec_private__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ec_private, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_private__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_private__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_wif_uncompressed_size_1u_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_private__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_37u_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_private__SWIG_7(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_secret, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_private__SWIG_10(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_37u_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ec_private__SWIG_6(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_wif_uncompressed_size_1u_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ec_private__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_secret, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint16_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ec_private__SWIG_9(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ec_private__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_secret, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint16_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ec_private__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ec_private.new", 
    "    ec_private.new()\n"
    "    ec_private.new(libbitcoin::wallet::ec_private const &other)\n"
    "    ec_private.new(std::string const &wif, uint8_t version)\n"
    "    ec_private.new(std::string const &wif)\n"
    "    ec_private.new(libbitcoin::wallet::wif_compressed const &wif, uint8_t version)\n"
    "    ec_private.new(libbitcoin::wallet::wif_compressed const &wif)\n"
    "    ec_private.new(libbitcoin::wallet::wif_uncompressed const &wif, uint8_t version)\n"
    "    ec_private.new(libbitcoin::wallet::wif_uncompressed const &wif)\n"
    "    ec_private.new(ec_secret const &secret, uint16_t version, bool compress)\n"
    "    ec_private.new(ec_secret const &secret, uint16_t version)\n"
    "    ec_private.new(ec_secret const &secret)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::ec_private.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_ec_private___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  libbitcoin::wallet::ec_private *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ec_private,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_private const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp2);
  result = (bool)((libbitcoin::wallet::ec_private const *)arg1)->operator <((libbitcoin::wallet::ec_private const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::ec_private.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ec_private___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  libbitcoin::wallet::ec_private *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ec_private,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_private const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp2);
  result = (bool)((libbitcoin::wallet::ec_private const *)arg1)->operator ==((libbitcoin::wallet::ec_private const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = (bool)((libbitcoin::wallet::ec_private const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_ec_secret(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_secret *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","operator const ec_secret&", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = (ec_secret *) &((libbitcoin::wallet::ec_private const *)arg1)->operator const ec_secret&();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ec_secret, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = ((libbitcoin::wallet::ec_private const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_secret(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_secret *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","secret", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = (ec_secret *) &((libbitcoin::wallet::ec_private const *)arg1)->secret();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ec_secret, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_version(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = ((libbitcoin::wallet::ec_private const *)arg1)->version();
  vresult = SWIG_NewPointerObj((new uint16_t(static_cast< const uint16_t& >(result))), SWIGTYPE_p_uint16_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_payment_version(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","payment_version", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = ((libbitcoin::wallet::ec_private const *)arg1)->payment_version();
  vresult = SWIG_NewPointerObj((new uint8_t(static_cast< const uint8_t& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_wif_version(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","wif_version", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = ((libbitcoin::wallet::ec_private const *)arg1)->wif_version();
  vresult = SWIG_NewPointerObj((new uint8_t(static_cast< const uint8_t& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_compressed(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","compressed", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = (bool)((libbitcoin::wallet::ec_private const *)arg1)->compressed();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_to_public(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_public result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","to_public", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = ((libbitcoin::wallet::ec_private const *)arg1)->to_public();
  vresult = SWIG_NewPointerObj((new ec_public(static_cast< const ec_public& >(result))), SWIGTYPE_p_ec_public, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_private_to_payment_address(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const *","to_payment_address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = ((libbitcoin::wallet::ec_private const *)arg1)->to_payment_address();
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_ec_private(void *self) {
    libbitcoin::wallet::ec_private *arg1 = (libbitcoin::wallet::ec_private *)self;
    delete arg1;
}

static swig_class SwigClassEc_public;

SWIGINTERN VALUE
_wrap_ec_public_compressed_even_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_public::compressed_even), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_public_compressed_odd_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_public::compressed_odd), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_public_uncompressed_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_public::uncompressed), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ec_public_mainnet_p2kh_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ec_public::mainnet_p2kh), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_new_ec_public__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::ec_public *)new libbitcoin::wallet::ec_public();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_public__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__ec_public,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const &","ec_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_public const &","ec_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  result = (libbitcoin::wallet::ec_public *)new libbitcoin::wallet::ec_public((libbitcoin::wallet::ec_public const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_public__SWIG_2(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__ec_private,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const &","ec_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_private const &","ec_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = (libbitcoin::wallet::ec_public *)new libbitcoin::wallet::ec_public((libbitcoin::wallet::ec_private const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_public__SWIG_3(int argc, VALUE *argv, VALUE self) {
  data_chunk *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_data_chunk,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "data_chunk const &","ec_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk const &","ec_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< data_chunk * >(argp1);
  result = (libbitcoin::wallet::ec_public *)new libbitcoin::wallet::ec_public((data_chunk const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_public__SWIG_4(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","ec_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ec_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::ec_public *)new libbitcoin::wallet::ec_public((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_public__SWIG_5(int argc, VALUE *argv, VALUE self) {
  ec_compressed *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  libbitcoin::wallet::ec_public *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_compressed const &","ec_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed const &","ec_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_compressed * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ec_public", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (libbitcoin::wallet::ec_public *)new libbitcoin::wallet::ec_public((ec_compressed const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_public__SWIG_6(int argc, VALUE *argv, VALUE self) {
  ec_compressed *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_compressed const &","ec_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed const &","ec_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_compressed * >(argp1);
  result = (libbitcoin::wallet::ec_public *)new libbitcoin::wallet::ec_public((ec_compressed const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ec_public__SWIG_7(int argc, VALUE *argv, VALUE self) {
  ec_uncompressed *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  libbitcoin::wallet::ec_public *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_uncompressed,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_uncompressed const &","ec_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_uncompressed const &","ec_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_uncompressed * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ec_public", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (libbitcoin::wallet::ec_public *)new libbitcoin::wallet::ec_public((ec_uncompressed const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ec_public_allocate(VALUE self)
#else
_wrap_ec_public_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__ec_public);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ec_public__SWIG_8(int argc, VALUE *argv, VALUE self) {
  ec_uncompressed *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ec_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_uncompressed,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_uncompressed const &","ec_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_uncompressed const &","ec_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_uncompressed * >(argp1);
  result = (libbitcoin::wallet::ec_public *)new libbitcoin::wallet::ec_public((ec_uncompressed const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ec_public(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ec_public__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ec_public, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_public__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ec_private, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_public__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_data_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_public__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_public__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_compressed, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_public__SWIG_6(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_uncompressed, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ec_public__SWIG_8(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_uncompressed, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ec_public__SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_compressed, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ec_public__SWIG_5(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ec_public.new", 
    "    ec_public.new()\n"
    "    ec_public.new(libbitcoin::wallet::ec_public const &other)\n"
    "    ec_public.new(libbitcoin::wallet::ec_private const &secret)\n"
    "    ec_public.new(data_chunk const &decoded)\n"
    "    ec_public.new(std::string const &base16)\n"
    "    ec_public.new(ec_compressed const &point, bool compress)\n"
    "    ec_public.new(ec_compressed const &point)\n"
    "    ec_public.new(ec_uncompressed const &point, bool compress)\n"
    "    ec_public.new(ec_uncompressed const &point)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::ec_public.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_ec_public___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  libbitcoin::wallet::ec_public *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ec_public,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_public const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp2);
  result = (bool)((libbitcoin::wallet::ec_public const *)arg1)->operator <((libbitcoin::wallet::ec_public const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::ec_public.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ec_public___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  libbitcoin::wallet::ec_public *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ec_public,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_public const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp2);
  result = (bool)((libbitcoin::wallet::ec_public const *)arg1)->operator ==((libbitcoin::wallet::ec_public const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_public_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  result = (bool)((libbitcoin::wallet::ec_public const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_public_ec_compressed(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_compressed *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","operator const ec_compressed&", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  result = (ec_compressed *) &((libbitcoin::wallet::ec_public const *)arg1)->operator const ec_compressed&();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ec_compressed, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_public_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  result = ((libbitcoin::wallet::ec_public const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_public_point(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_compressed *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","point", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  result = (ec_compressed *) &((libbitcoin::wallet::ec_public const *)arg1)->point();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ec_compressed, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_public_compressed(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","compressed", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  result = (bool)((libbitcoin::wallet::ec_public const *)arg1)->compressed();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_public_to_data(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  data_chunk *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","to_data", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_data_chunk,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "data_chunk &","to_data", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk &","to_data", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< data_chunk * >(argp2);
  result = (bool)((libbitcoin::wallet::ec_public const *)arg1)->to_data(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_public_to_uncompressed(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  ec_uncompressed *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","to_uncompressed", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ec_uncompressed,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ec_uncompressed &","to_uncompressed", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_uncompressed &","to_uncompressed", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ec_uncompressed * >(argp2);
  result = (bool)((libbitcoin::wallet::ec_public const *)arg1)->to_uncompressed(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_public_to_payment_address__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","to_payment_address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","to_payment_address", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","to_payment_address", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = ((libbitcoin::wallet::ec_public const *)arg1)->to_payment_address(arg2);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ec_public_to_payment_address__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ec_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const *","to_payment_address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  result = ((libbitcoin::wallet::ec_public const *)arg1)->to_payment_address();
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ec_public_to_payment_address(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ec_public, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ec_public_to_payment_address__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ec_public, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ec_public_to_payment_address__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ec_public.to_payment_address", 
    "    libbitcoin::wallet::payment_address ec_public.to_payment_address(uint8_t version)\n"
    "    libbitcoin::wallet::payment_address ec_public.to_payment_address()\n");
  
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_ec_public(void *self) {
    libbitcoin::wallet::ec_public *arg1 = (libbitcoin::wallet::ec_public *)self;
    delete arg1;
}

static swig_class SwigClassEk_private;

SWIGINTERN VALUE
_wrap_new_ek_private__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_private *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::ek_private *)new libbitcoin::wallet::ek_private();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ek_private__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ek_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","ek_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ek_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::ek_private *)new libbitcoin::wallet::ek_private((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ek_private__SWIG_2(int argc, VALUE *argv, VALUE self) {
  encrypted_private *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ek_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_encrypted_private,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "encrypted_private const &","ek_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "encrypted_private const &","ek_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< encrypted_private * >(argp1);
  result = (libbitcoin::wallet::ek_private *)new libbitcoin::wallet::ek_private((encrypted_private const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ek_private_allocate(VALUE self)
#else
_wrap_ek_private_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__ek_private);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ek_private__SWIG_3(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_private *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ek_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__ek_private,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_private const &","ek_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_private const &","ek_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_private * >(argp1);
  result = (libbitcoin::wallet::ek_private *)new libbitcoin::wallet::ek_private((libbitcoin::wallet::ek_private const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ek_private(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ek_private__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ek_private__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_encrypted_private, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ek_private__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ek_private, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ek_private__SWIG_3(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "ek_private.new", 
    "    ek_private.new()\n"
    "    ek_private.new(std::string const &encoded)\n"
    "    ek_private.new(encrypted_private const &key)\n"
    "    ek_private.new(libbitcoin::wallet::ek_private const &other)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::ek_private.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_ek_private___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_private *arg1 = (libbitcoin::wallet::ek_private *) 0 ;
  libbitcoin::wallet::ek_private *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_private const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ek_private,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_private const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_private const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ek_private * >(argp2);
  result = (bool)((libbitcoin::wallet::ek_private const *)arg1)->operator <((libbitcoin::wallet::ek_private const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::ek_private.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ek_private___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_private *arg1 = (libbitcoin::wallet::ek_private *) 0 ;
  libbitcoin::wallet::ek_private *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_private const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ek_private,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_private const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_private const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ek_private * >(argp2);
  result = (bool)((libbitcoin::wallet::ek_private const *)arg1)->operator ==((libbitcoin::wallet::ek_private const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_private_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_private *arg1 = (libbitcoin::wallet::ek_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_private const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_private * >(argp1);
  result = (bool)((libbitcoin::wallet::ek_private const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_private_encrypted_private(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_private *arg1 = (libbitcoin::wallet::ek_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  encrypted_private *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_private const *","operator const libbitcoin::wallet::encrypted_private&", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_private * >(argp1);
  result = (encrypted_private *) &((libbitcoin::wallet::ek_private const *)arg1)->operator const libbitcoin::wallet::encrypted_private&();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_encrypted_private, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_private_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_private *arg1 = (libbitcoin::wallet::ek_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_private const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_private * >(argp1);
  result = ((libbitcoin::wallet::ek_private const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_private_private_key(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_private *arg1 = (libbitcoin::wallet::ek_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  encrypted_private *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_private const *","private_key", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_private * >(argp1);
  result = (encrypted_private *) &((libbitcoin::wallet::ek_private const *)arg1)->private_key();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_encrypted_private, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_ek_private(void *self) {
    libbitcoin::wallet::ek_private *arg1 = (libbitcoin::wallet::ek_private *)self;
    delete arg1;
}

static swig_class SwigClassEk_public;

SWIGINTERN VALUE
_wrap_new_ek_public__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_public *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::ek_public *)new libbitcoin::wallet::ek_public();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ek_public__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ek_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","ek_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ek_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::ek_public *)new libbitcoin::wallet::ek_public((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ek_public__SWIG_2(int argc, VALUE *argv, VALUE self) {
  encrypted_public *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ek_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_encrypted_public,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "encrypted_public const &","ek_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "encrypted_public const &","ek_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< encrypted_public * >(argp1);
  result = (libbitcoin::wallet::ek_public *)new libbitcoin::wallet::ek_public((encrypted_public const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ek_public_allocate(VALUE self)
#else
_wrap_ek_public_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__ek_public);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ek_public__SWIG_3(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_public *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ek_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__ek_public,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_public const &","ek_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_public const &","ek_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_public * >(argp1);
  result = (libbitcoin::wallet::ek_public *)new libbitcoin::wallet::ek_public((libbitcoin::wallet::ek_public const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ek_public(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ek_public__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ek_public__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_encrypted_public, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ek_public__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ek_public, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ek_public__SWIG_3(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "ek_public.new", 
    "    ek_public.new()\n"
    "    ek_public.new(std::string const &encoded)\n"
    "    ek_public.new(encrypted_public const &key)\n"
    "    ek_public.new(libbitcoin::wallet::ek_public const &other)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::ek_public.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_ek_public___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_public *arg1 = (libbitcoin::wallet::ek_public *) 0 ;
  libbitcoin::wallet::ek_public *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_public const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_public * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ek_public,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_public const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_public const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ek_public * >(argp2);
  result = (bool)((libbitcoin::wallet::ek_public const *)arg1)->operator <((libbitcoin::wallet::ek_public const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::ek_public.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ek_public___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_public *arg1 = (libbitcoin::wallet::ek_public *) 0 ;
  libbitcoin::wallet::ek_public *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_public const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_public * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ek_public,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_public const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_public const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ek_public * >(argp2);
  result = (bool)((libbitcoin::wallet::ek_public const *)arg1)->operator ==((libbitcoin::wallet::ek_public const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_public_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_public *arg1 = (libbitcoin::wallet::ek_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_public const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_public * >(argp1);
  result = (bool)((libbitcoin::wallet::ek_public const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_public_encrypted_public(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_public *arg1 = (libbitcoin::wallet::ek_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  encrypted_public *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_public const *","operator const libbitcoin::wallet::encrypted_public&", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_public * >(argp1);
  result = (encrypted_public *) &((libbitcoin::wallet::ek_public const *)arg1)->operator const libbitcoin::wallet::encrypted_public&();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_encrypted_public, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_public_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_public *arg1 = (libbitcoin::wallet::ek_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_public const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_public * >(argp1);
  result = ((libbitcoin::wallet::ek_public const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_public_public_key(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_public *arg1 = (libbitcoin::wallet::ek_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  encrypted_public *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_public const *","public_key", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_public * >(argp1);
  result = (encrypted_public *) &((libbitcoin::wallet::ek_public const *)arg1)->public_key();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_encrypted_public, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_ek_public(void *self) {
    libbitcoin::wallet::ek_public *arg1 = (libbitcoin::wallet::ek_public *)self;
    delete arg1;
}

static swig_class SwigClassEk_token;

SWIGINTERN VALUE
_wrap_new_ek_token__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_token *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::ek_token *)new libbitcoin::wallet::ek_token();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ek_token__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ek_token *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","ek_token", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ek_token", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::ek_token *)new libbitcoin::wallet::ek_token((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ek_token__SWIG_2(int argc, VALUE *argv, VALUE self) {
  encrypted_token *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ek_token *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_encrypted_token,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "encrypted_token const &","ek_token", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "encrypted_token const &","ek_token", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< encrypted_token * >(argp1);
  result = (libbitcoin::wallet::ek_token *)new libbitcoin::wallet::ek_token((encrypted_token const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ek_token_allocate(VALUE self)
#else
_wrap_ek_token_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__ek_token);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ek_token__SWIG_3(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_token *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::ek_token *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__ek_token,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_token const &","ek_token", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_token const &","ek_token", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_token * >(argp1);
  result = (libbitcoin::wallet::ek_token *)new libbitcoin::wallet::ek_token((libbitcoin::wallet::ek_token const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ek_token(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ek_token__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ek_token__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_encrypted_token, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ek_token__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ek_token, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ek_token__SWIG_3(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "ek_token.new", 
    "    ek_token.new()\n"
    "    ek_token.new(std::string const &encoded)\n"
    "    ek_token.new(encrypted_token const &key)\n"
    "    ek_token.new(libbitcoin::wallet::ek_token const &other)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::ek_token.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_ek_token___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_token *arg1 = (libbitcoin::wallet::ek_token *) 0 ;
  libbitcoin::wallet::ek_token *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_token, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_token const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_token * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ek_token,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_token const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_token const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ek_token * >(argp2);
  result = (bool)((libbitcoin::wallet::ek_token const *)arg1)->operator <((libbitcoin::wallet::ek_token const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::ek_token.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ek_token___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_token *arg1 = (libbitcoin::wallet::ek_token *) 0 ;
  libbitcoin::wallet::ek_token *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_token, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_token const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_token * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__ek_token,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_token const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_token const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::ek_token * >(argp2);
  result = (bool)((libbitcoin::wallet::ek_token const *)arg1)->operator ==((libbitcoin::wallet::ek_token const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_token_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_token *arg1 = (libbitcoin::wallet::ek_token *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_token, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_token const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_token * >(argp1);
  result = (bool)((libbitcoin::wallet::ek_token const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_token_encrypted_token(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_token *arg1 = (libbitcoin::wallet::ek_token *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  encrypted_token *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_token, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_token const *","operator const libbitcoin::wallet::encrypted_token&", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_token * >(argp1);
  result = (encrypted_token *) &((libbitcoin::wallet::ek_token const *)arg1)->operator const libbitcoin::wallet::encrypted_token&();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_encrypted_token, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_token_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_token *arg1 = (libbitcoin::wallet::ek_token *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_token, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_token const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_token * >(argp1);
  result = ((libbitcoin::wallet::ek_token const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ek_token_token(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ek_token *arg1 = (libbitcoin::wallet::ek_token *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  encrypted_token *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__ek_token, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_token const *","token", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ek_token * >(argp1);
  result = (encrypted_token *) &((libbitcoin::wallet::ek_token const *)arg1)->token();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_encrypted_token, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_ek_token(void *self) {
    libbitcoin::wallet::ek_token *arg1 = (libbitcoin::wallet::ek_token *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ek_max_lot_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ek_max_lot), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ek_max_sequence_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::ek_max_sequence), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_ek_salt_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::ek_salt_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_ek_entropy_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::ek_entropy_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_ek_seed_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::ek_seed_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_encrypted_token_encoded_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::encrypted_token_encoded_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_encrypted_token_decoded_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::encrypted_token_decoded_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_ek_private_encoded_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::ek_private_encoded_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_ek_private_decoded_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::ek_private_decoded_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_encrypted_public_encoded_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::encrypted_public_encoded_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_encrypted_public_decoded_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::encrypted_public_decoded_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_create_key_pair__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::encrypted_private *arg1 = 0 ;
  ec_compressed *arg2 = 0 ;
  libbitcoin::wallet::encrypted_token *arg3 = 0 ;
  libbitcoin::wallet::ek_seed *arg4 = 0 ;
  uint8_t arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_43_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_private &","libbitcoin::wallet::create_key_pair", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_private &","libbitcoin::wallet::create_key_pair", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::encrypted_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ec_compressed &","libbitcoin::wallet::create_key_pair", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed &","libbitcoin::wallet::create_key_pair", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ec_compressed * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_byte_arrayT_53_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_token const &","libbitcoin::wallet::create_key_pair", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_token const &","libbitcoin::wallet::create_key_pair", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< libbitcoin::wallet::encrypted_token * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_byte_arrayT_24_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_seed const &","libbitcoin::wallet::create_key_pair", 4, argv[3] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_seed const &","libbitcoin::wallet::create_key_pair", 4, argv[3])); 
  }
  arg4 = reinterpret_cast< libbitcoin::wallet::ek_seed * >(argp4);
  {
    res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::create_key_pair", 5, argv[4] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::create_key_pair", 5, argv[4]));
    } else {
      arg5 = *(reinterpret_cast< uint8_t * >(argp5));
    }
  }
  ecode6 = SWIG_AsVal_bool(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "bool","libbitcoin::wallet::create_key_pair", 6, argv[5] ));
  } 
  arg6 = static_cast< bool >(val6);
  result = (bool)libbitcoin::wallet::create_key_pair(*arg1,*arg2,(byte_array< 53 > const &)*arg3,(byte_array< 24 > const &)*arg4,arg5,arg6);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_create_key_pair__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::encrypted_private *arg1 = 0 ;
  ec_compressed *arg2 = 0 ;
  libbitcoin::wallet::encrypted_token *arg3 = 0 ;
  libbitcoin::wallet::ek_seed *arg4 = 0 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_43_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_private &","libbitcoin::wallet::create_key_pair", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_private &","libbitcoin::wallet::create_key_pair", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::encrypted_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ec_compressed &","libbitcoin::wallet::create_key_pair", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed &","libbitcoin::wallet::create_key_pair", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ec_compressed * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_byte_arrayT_53_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_token const &","libbitcoin::wallet::create_key_pair", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_token const &","libbitcoin::wallet::create_key_pair", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< libbitcoin::wallet::encrypted_token * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_byte_arrayT_24_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_seed const &","libbitcoin::wallet::create_key_pair", 4, argv[3] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_seed const &","libbitcoin::wallet::create_key_pair", 4, argv[3])); 
  }
  arg4 = reinterpret_cast< libbitcoin::wallet::ek_seed * >(argp4);
  {
    res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::create_key_pair", 5, argv[4] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::create_key_pair", 5, argv[4]));
    } else {
      arg5 = *(reinterpret_cast< uint8_t * >(argp5));
    }
  }
  result = (bool)libbitcoin::wallet::create_key_pair(*arg1,*arg2,(byte_array< 53 > const &)*arg3,(byte_array< 24 > const &)*arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_create_key_pair__SWIG_2(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::encrypted_private *arg1 = 0 ;
  libbitcoin::wallet::encrypted_public *arg2 = 0 ;
  ec_compressed *arg3 = 0 ;
  libbitcoin::wallet::encrypted_token *arg4 = 0 ;
  libbitcoin::wallet::ek_seed *arg5 = 0 ;
  uint8_t arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_43_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_private &","libbitcoin::wallet::create_key_pair", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_private &","libbitcoin::wallet::create_key_pair", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::encrypted_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_byte_arrayT_55_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_public &","libbitcoin::wallet::create_key_pair", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_public &","libbitcoin::wallet::create_key_pair", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::encrypted_public * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "ec_compressed &","libbitcoin::wallet::create_key_pair", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed &","libbitcoin::wallet::create_key_pair", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< ec_compressed * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_byte_arrayT_53_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_token const &","libbitcoin::wallet::create_key_pair", 4, argv[3] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_token const &","libbitcoin::wallet::create_key_pair", 4, argv[3])); 
  }
  arg4 = reinterpret_cast< libbitcoin::wallet::encrypted_token * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_byte_arrayT_24_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_seed const &","libbitcoin::wallet::create_key_pair", 5, argv[4] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_seed const &","libbitcoin::wallet::create_key_pair", 5, argv[4])); 
  }
  arg5 = reinterpret_cast< libbitcoin::wallet::ek_seed * >(argp5);
  {
    res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::create_key_pair", 6, argv[5] )); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::create_key_pair", 6, argv[5]));
    } else {
      arg6 = *(reinterpret_cast< uint8_t * >(argp6));
    }
  }
  ecode7 = SWIG_AsVal_bool(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "bool","libbitcoin::wallet::create_key_pair", 7, argv[6] ));
  } 
  arg7 = static_cast< bool >(val7);
  result = (bool)libbitcoin::wallet::create_key_pair(*arg1,*arg2,*arg3,(byte_array< 53 > const &)*arg4,(byte_array< 24 > const &)*arg5,arg6,arg7);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_create_key_pair__SWIG_3(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::encrypted_private *arg1 = 0 ;
  libbitcoin::wallet::encrypted_public *arg2 = 0 ;
  ec_compressed *arg3 = 0 ;
  libbitcoin::wallet::encrypted_token *arg4 = 0 ;
  libbitcoin::wallet::ek_seed *arg5 = 0 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_43_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_private &","libbitcoin::wallet::create_key_pair", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_private &","libbitcoin::wallet::create_key_pair", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::encrypted_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_byte_arrayT_55_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_public &","libbitcoin::wallet::create_key_pair", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_public &","libbitcoin::wallet::create_key_pair", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::encrypted_public * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "ec_compressed &","libbitcoin::wallet::create_key_pair", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed &","libbitcoin::wallet::create_key_pair", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< ec_compressed * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_byte_arrayT_53_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "libbitcoin::wallet::encrypted_token const &","libbitcoin::wallet::create_key_pair", 4, argv[3] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::encrypted_token const &","libbitcoin::wallet::create_key_pair", 4, argv[3])); 
  }
  arg4 = reinterpret_cast< libbitcoin::wallet::encrypted_token * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_byte_arrayT_24_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "libbitcoin::wallet::ek_seed const &","libbitcoin::wallet::create_key_pair", 5, argv[4] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ek_seed const &","libbitcoin::wallet::create_key_pair", 5, argv[4])); 
  }
  arg5 = reinterpret_cast< libbitcoin::wallet::ek_seed * >(argp5);
  {
    res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::create_key_pair", 6, argv[5] )); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::create_key_pair", 6, argv[5]));
    } else {
      arg6 = *(reinterpret_cast< uint8_t * >(argp6));
    }
  }
  result = (bool)libbitcoin::wallet::create_key_pair(*arg1,*arg2,*arg3,(byte_array< 53 > const &)*arg4,(byte_array< 24 > const &)*arg5,arg6);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_create_key_pair(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs;
  if (argc > 7) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_43_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ec_compressed, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_byte_arrayT_53_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_byte_arrayT_24_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_uint8_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_create_key_pair__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_43_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ec_compressed, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_byte_arrayT_53_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_byte_arrayT_24_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_uint8_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_create_key_pair__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_43_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_byte_arrayT_55_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ec_compressed, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_byte_arrayT_53_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_byte_arrayT_24_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_uint8_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_create_key_pair__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_43_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_byte_arrayT_55_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ec_compressed, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_byte_arrayT_53_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_byte_arrayT_24_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_uint8_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_create_key_pair__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "create_key_pair", 
    "    bool create_key_pair(libbitcoin::wallet::encrypted_private &out_private, ec_compressed &out_point, libbitcoin::wallet::encrypted_token const &token, libbitcoin::wallet::ek_seed const &seed, uint8_t version, bool compressed)\n"
    "    bool create_key_pair(libbitcoin::wallet::encrypted_private &out_private, ec_compressed &out_point, libbitcoin::wallet::encrypted_token const &token, libbitcoin::wallet::ek_seed const &seed, uint8_t version)\n"
    "    bool create_key_pair(libbitcoin::wallet::encrypted_private &out_private, libbitcoin::wallet::encrypted_public &out_public, ec_compressed &out_point, libbitcoin::wallet::encrypted_token const &token, libbitcoin::wallet::ek_seed const &seed, uint8_t version, bool compressed)\n"
    "    bool create_key_pair(libbitcoin::wallet::encrypted_private &out_private, libbitcoin::wallet::encrypted_public &out_public, ec_compressed &out_point, libbitcoin::wallet::encrypted_token const &token, libbitcoin::wallet::ek_seed const &seed, uint8_t version)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_first_hardened_key_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::hd_first_hardened_key), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_hd_chain_code_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::hd_chain_code_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_hd_key_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::hd_key_size));
  return _val;
}


static swig_class SwigClassHd_lineage;

SWIGINTERN VALUE
_wrap_hd_lineage_prefixes_set(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage *","prefixes", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint64_t","prefixes", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","prefixes", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint64_t * >(argp2));
    }
  }
  if (arg1) (arg1)->prefixes = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_lineage_prefixes_get(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage *","prefixes", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp1);
  result =  ((arg1)->prefixes);
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_lineage_depth_set(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage *","depth", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","depth", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","depth", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  if (arg1) (arg1)->depth = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_lineage_depth_get(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage *","depth", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp1);
  result =  ((arg1)->depth);
  vresult = SWIG_NewPointerObj((new uint8_t(static_cast< const uint8_t& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_lineage_parent_fingerprint_set(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage *","parent_fingerprint", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","parent_fingerprint", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","parent_fingerprint", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  if (arg1) (arg1)->parent_fingerprint = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_lineage_parent_fingerprint_get(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage *","parent_fingerprint", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp1);
  result =  ((arg1)->parent_fingerprint);
  vresult = SWIG_NewPointerObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_lineage_child_number_set(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage *","child_number", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","child_number", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","child_number", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  if (arg1) (arg1)->child_number = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_lineage_child_number_get(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage *","child_number", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp1);
  result =  ((arg1)->child_number);
  vresult = SWIG_NewPointerObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::hd_lineage.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_hd_lineage___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *) 0 ;
  libbitcoin::wallet::hd_lineage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__hd_lineage,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_lineage const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_lineage const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::hd_lineage * >(argp2);
  result = (bool)((libbitcoin::wallet::hd_lineage const *)arg1)->operator ==((libbitcoin::wallet::hd_lineage const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_hd_lineage_allocate(VALUE self)
#else
_wrap_hd_lineage_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__hd_lineage);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_hd_lineage(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_lineage *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::hd_lineage *)new libbitcoin::wallet::hd_lineage();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_hd_lineage(void *self) {
    libbitcoin::wallet::hd_lineage *arg1 = (libbitcoin::wallet::hd_lineage *)self;
    delete arg1;
}

static swig_class SwigClassHd_public;

SWIGINTERN VALUE
_wrap_hd_public_mainnet_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::hd_public::mainnet), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_hd_public_testnet_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::hd_public::testnet), SWIGTYPE_p_uint32_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_hd_public_to_prefix(int argc, VALUE *argv, VALUE self) {
  uint64_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint64_t","libbitcoin::wallet::hd_public::to_prefix", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","libbitcoin::wallet::hd_public::to_prefix", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< uint64_t * >(argp1));
    }
  }
  result = libbitcoin::wallet::hd_public::to_prefix(arg1);
  vresult = SWIG_NewPointerObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_public__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::hd_public *)new libbitcoin::wallet::hd_public();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_public__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__hd_public,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const &","hd_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_public const &","hd_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  result = (libbitcoin::wallet::hd_public *)new libbitcoin::wallet::hd_public((libbitcoin::wallet::hd_public const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_public__SWIG_2(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_key *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_82_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_key const &","hd_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_key const &","hd_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_key * >(argp1);
  result = (libbitcoin::wallet::hd_public *)new libbitcoin::wallet::hd_public((libbitcoin::wallet::hd_key const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_public__SWIG_3(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_key *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_public *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_82_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_key const &","hd_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_key const &","hd_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_key * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","hd_public", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","hd_public", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::hd_public *)new libbitcoin::wallet::hd_public((libbitcoin::wallet::hd_key const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_public__SWIG_4(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_public *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","hd_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","hd_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::hd_public *)new libbitcoin::wallet::hd_public((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_hd_public_allocate(VALUE self)
#else
_wrap_hd_public_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__hd_public);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_hd_public__SWIG_5(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_public *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","hd_public", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","hd_public", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","hd_public", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","hd_public", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::hd_public *)new libbitcoin::wallet::hd_public((std::string const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_hd_public(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_hd_public__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__hd_public, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_hd_public__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_82_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_hd_public__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_hd_public__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_82_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint32_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_hd_public__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint32_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_hd_public__SWIG_5(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "hd_public.new", 
    "    hd_public.new()\n"
    "    hd_public.new(libbitcoin::wallet::hd_public const &other)\n"
    "    hd_public.new(libbitcoin::wallet::hd_key const &public_key)\n"
    "    hd_public.new(libbitcoin::wallet::hd_key const &public_key, uint32_t prefix)\n"
    "    hd_public.new(std::string const &encoded)\n"
    "    hd_public.new(std::string const &encoded, uint32_t prefix)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::hd_public.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_hd_public___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  libbitcoin::wallet::hd_public *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__hd_public,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_public const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp2);
  result = (bool)((libbitcoin::wallet::hd_public const *)arg1)->operator <((libbitcoin::wallet::hd_public const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::hd_public.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_hd_public___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  libbitcoin::wallet::hd_public *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__hd_public,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_public const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp2);
  result = (bool)((libbitcoin::wallet::hd_public const *)arg1)->operator ==((libbitcoin::wallet::hd_public const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_public_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  result = (bool)((libbitcoin::wallet::hd_public const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_public_ec_compressed(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_compressed *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","operator const ec_compressed&", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  result = (ec_compressed *) &((libbitcoin::wallet::hd_public const *)arg1)->operator const ec_compressed&();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ec_compressed, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_public_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  result = ((libbitcoin::wallet::hd_public const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_public_chain_code(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_chain_code *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","chain_code", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  result = (libbitcoin::wallet::hd_chain_code *) &((libbitcoin::wallet::hd_public const *)arg1)->chain_code();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_byte_arrayT_32_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_public_lineage(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_lineage *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","lineage", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  result = (libbitcoin::wallet::hd_lineage *) &((libbitcoin::wallet::hd_public const *)arg1)->lineage();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libbitcoin__wallet__hd_lineage, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_public_point(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_compressed *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","point", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  result = (ec_compressed *) &((libbitcoin::wallet::hd_public const *)arg1)->point();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ec_compressed, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_public_to_hd_key(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_key result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","to_hd_key", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  result = ((libbitcoin::wallet::hd_public const *)arg1)->to_hd_key();
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::hd_key(static_cast< const libbitcoin::wallet::hd_key& >(result))), SWIGTYPE_p_byte_arrayT_82_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_public_derive_public(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_public result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_public, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_public const *","derive_public", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_public * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","derive_public", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","derive_public", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  result = ((libbitcoin::wallet::hd_public const *)arg1)->derive_public(arg2);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::hd_public(static_cast< const libbitcoin::wallet::hd_public& >(result))), SWIGTYPE_p_libbitcoin__wallet__hd_public, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_hd_public(void *self) {
    libbitcoin::wallet::hd_public *arg1 = (libbitcoin::wallet::hd_public *)self;
    delete arg1;
}

static swig_class SwigClassHd_private;

SWIGINTERN VALUE
_wrap_hd_private_mainnet_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::hd_private::mainnet), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_hd_private_testnet_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::hd_private::testnet), SWIGTYPE_p_uint64_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_hd_private_to_prefix(int argc, VALUE *argv, VALUE self) {
  uint64_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint64_t","libbitcoin::wallet::hd_private::to_prefix", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","libbitcoin::wallet::hd_private::to_prefix", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< uint64_t * >(argp1));
    }
  }
  result = libbitcoin::wallet::hd_private::to_prefix(arg1);
  vresult = SWIG_NewPointerObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_private_to_prefixes(int argc, VALUE *argv, VALUE self) {
  uint32_t arg1 ;
  uint32_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  uint64_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint32_t","libbitcoin::wallet::hd_private::to_prefixes", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","libbitcoin::wallet::hd_private::to_prefixes", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< uint32_t * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","libbitcoin::wallet::hd_private::to_prefixes", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","libbitcoin::wallet::hd_private::to_prefixes", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  result = libbitcoin::wallet::hd_private::to_prefixes(arg1,arg2);
  vresult = SWIG_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__hd_private,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const &","hd_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_private const &","hd_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private((libbitcoin::wallet::hd_private const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_2(int argc, VALUE *argv, VALUE self) {
  data_chunk *arg1 = 0 ;
  uint64_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_data_chunk,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "data_chunk const &","hd_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk const &","hd_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< data_chunk * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint64_t","hd_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","hd_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint64_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private((data_chunk const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_3(int argc, VALUE *argv, VALUE self) {
  data_chunk *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_data_chunk,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "data_chunk const &","hd_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk const &","hd_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< data_chunk * >(argp1);
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private((data_chunk const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_4(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_key *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_82_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_key const &","hd_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_key const &","hd_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_key * >(argp1);
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private((libbitcoin::wallet::hd_key const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_5(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_key *arg1 = 0 ;
  uint64_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_82_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_key const &","hd_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_key const &","hd_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_key * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint64_t","hd_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","hd_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint64_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private((libbitcoin::wallet::hd_key const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_6(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_key *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_82_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_key const &","hd_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_key const &","hd_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_key * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","hd_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","hd_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private((libbitcoin::wallet::hd_key const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_7(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","hd_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","hd_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_8(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  uint64_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","hd_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","hd_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint64_t","hd_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","hd_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint64_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private((std::string const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_hd_private_allocate(VALUE self)
#else
_wrap_hd_private_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__hd_private);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_hd_private__SWIG_9(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_private *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","hd_private", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","hd_private", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","hd_private", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","hd_private", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::hd_private *)new libbitcoin::wallet::hd_private((std::string const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_hd_private(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_hd_private__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__hd_private, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_hd_private__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_data_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_hd_private__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_82_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_hd_private__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_hd_private__SWIG_7(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_82_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint64_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_hd_private__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_82_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint32_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_hd_private__SWIG_6(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_data_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint64_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_hd_private__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint64_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_hd_private__SWIG_8(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint32_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_hd_private__SWIG_9(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "hd_private.new", 
    "    hd_private.new()\n"
    "    hd_private.new(libbitcoin::wallet::hd_private const &other)\n"
    "    hd_private.new(data_chunk const &seed, uint64_t prefixes)\n"
    "    hd_private.new(data_chunk const &seed)\n"
    "    hd_private.new(libbitcoin::wallet::hd_key const &private_key)\n"
    "    hd_private.new(libbitcoin::wallet::hd_key const &private_key, uint64_t prefixes)\n"
    "    hd_private.new(libbitcoin::wallet::hd_key const &private_key, uint32_t public_prefix)\n"
    "    hd_private.new(std::string const &encoded)\n"
    "    hd_private.new(std::string const &encoded, uint64_t prefixes)\n"
    "    hd_private.new(std::string const &encoded, uint32_t public_prefix)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::hd_private.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_hd_private___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *) 0 ;
  libbitcoin::wallet::hd_private *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__hd_private,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_private const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp2);
  result = (bool)((libbitcoin::wallet::hd_private const *)arg1)->operator <((libbitcoin::wallet::hd_private const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::hd_private.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_hd_private___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *) 0 ;
  libbitcoin::wallet::hd_private *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__hd_private,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::hd_private const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp2);
  result = (bool)((libbitcoin::wallet::hd_private const *)arg1)->operator ==((libbitcoin::wallet::hd_private const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_private_ec_secret(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_secret *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const *","operator const ec_secret&", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  result = (ec_secret *) &((libbitcoin::wallet::hd_private const *)arg1)->operator const ec_secret&();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ec_secret, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_private_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  result = ((libbitcoin::wallet::hd_private const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_private_secret(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_secret *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const *","secret", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  result = (ec_secret *) &((libbitcoin::wallet::hd_private const *)arg1)->secret();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ec_secret, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_private_to_hd_key(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_key result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const *","to_hd_key", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  result = ((libbitcoin::wallet::hd_private const *)arg1)->to_hd_key();
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::hd_key(static_cast< const libbitcoin::wallet::hd_key& >(result))), SWIGTYPE_p_byte_arrayT_82_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_private_to_public(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::hd_public result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const *","to_public", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  result = ((libbitcoin::wallet::hd_private const *)arg1)->to_public();
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::hd_public(static_cast< const libbitcoin::wallet::hd_public& >(result))), SWIGTYPE_p_libbitcoin__wallet__hd_public, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_private_derive_private(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_private result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const *","derive_private", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","derive_private", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","derive_private", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  result = ((libbitcoin::wallet::hd_private const *)arg1)->derive_private(arg2);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::hd_private(static_cast< const libbitcoin::wallet::hd_private& >(result))), SWIGTYPE_p_libbitcoin__wallet__hd_private, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_hd_private_derive_public(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::hd_public result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__hd_private, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::hd_private const *","derive_public", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::hd_private * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","derive_public", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","derive_public", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  result = ((libbitcoin::wallet::hd_private const *)arg1)->derive_public(arg2);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::hd_public(static_cast< const libbitcoin::wallet::hd_public& >(result))), SWIGTYPE_p_libbitcoin__wallet__hd_public, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_hd_private(void *self) {
    libbitcoin::wallet::hd_private *arg1 = (libbitcoin::wallet::hd_private *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_message_signature_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::message_signature_size));
  return _val;
}


SWIGINTERN VALUE
_wrap_hash_message(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< data_slice > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  hash_digest result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_data_slice,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "data_slice","libbitcoin::wallet::hash_message", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_slice","libbitcoin::wallet::hash_message", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< data_slice * >(argp1));
    }
  }
  result = libbitcoin::wallet::hash_message(arg1);
  vresult = SWIG_NewPointerObj((new hash_digest(static_cast< const hash_digest& >(result))), SWIGTYPE_p_hash_digest, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_sign_message__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::message_signature *arg1 = 0 ;
  SwigValueWrapper< data_slice > arg2 ;
  libbitcoin::wallet::ec_private *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::message_signature &","libbitcoin::wallet::sign_message", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::message_signature &","libbitcoin::wallet::sign_message", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::message_signature * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_data_slice,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "data_slice","libbitcoin::wallet::sign_message", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_slice","libbitcoin::wallet::sign_message", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< data_slice * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_libbitcoin__wallet__ec_private,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const &","libbitcoin::wallet::sign_message", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_private const &","libbitcoin::wallet::sign_message", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp3);
  result = (bool)libbitcoin::wallet::sign_message(*arg1,arg2,(libbitcoin::wallet::ec_private const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_sign_message__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::message_signature *arg1 = 0 ;
  SwigValueWrapper< data_slice > arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::message_signature &","libbitcoin::wallet::sign_message", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::message_signature &","libbitcoin::wallet::sign_message", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::message_signature * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_data_slice,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "data_slice","libbitcoin::wallet::sign_message", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_slice","libbitcoin::wallet::sign_message", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< data_slice * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::string const &","libbitcoin::wallet::sign_message", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","libbitcoin::wallet::sign_message", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  result = (bool)libbitcoin::wallet::sign_message(*arg1,arg2,(std::string const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_sign_message__SWIG_2(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::message_signature *arg1 = 0 ;
  SwigValueWrapper< data_slice > arg2 ;
  ec_secret *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::message_signature &","libbitcoin::wallet::sign_message", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::message_signature &","libbitcoin::wallet::sign_message", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::message_signature * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_data_slice,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "data_slice","libbitcoin::wallet::sign_message", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_slice","libbitcoin::wallet::sign_message", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< data_slice * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "ec_secret const &","libbitcoin::wallet::sign_message", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","libbitcoin::wallet::sign_message", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< ec_secret * >(argp3);
  ecode4 = SWIG_AsVal_bool(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","libbitcoin::wallet::sign_message", 4, argv[3] ));
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)libbitcoin::wallet::sign_message(*arg1,arg2,(ec_secret const &)*arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_sign_message__SWIG_3(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::message_signature *arg1 = 0 ;
  SwigValueWrapper< data_slice > arg2 ;
  ec_secret *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::message_signature &","libbitcoin::wallet::sign_message", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::message_signature &","libbitcoin::wallet::sign_message", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::message_signature * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_data_slice,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "data_slice","libbitcoin::wallet::sign_message", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_slice","libbitcoin::wallet::sign_message", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< data_slice * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "ec_secret const &","libbitcoin::wallet::sign_message", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","libbitcoin::wallet::sign_message", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< ec_secret * >(argp3);
  result = (bool)libbitcoin::wallet::sign_message(*arg1,arg2,(ec_secret const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_sign_message(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_data_slice, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_libbitcoin__wallet__ec_private, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_sign_message__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_data_slice, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_sign_message__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_data_slice, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ec_secret, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_sign_message__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_data_slice, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ec_secret, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_sign_message__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "sign_message", 
    "    bool sign_message(libbitcoin::wallet::message_signature &signature, data_slice message, libbitcoin::wallet::ec_private const &secret)\n"
    "    bool sign_message(libbitcoin::wallet::message_signature &out_signature, data_slice message, std::string const &wif)\n"
    "    bool sign_message(libbitcoin::wallet::message_signature &out_signature, data_slice message, ec_secret const &secret, bool compressed)\n"
    "    bool sign_message(libbitcoin::wallet::message_signature &out_signature, data_slice message, ec_secret const &secret)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_verify_message(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< data_slice > arg1 ;
  libbitcoin::wallet::payment_address *arg2 = 0 ;
  libbitcoin::wallet::message_signature *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_data_slice,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "data_slice","libbitcoin::wallet::verify_message", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_slice","libbitcoin::wallet::verify_message", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< data_slice * >(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_libbitcoin__wallet__payment_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const &","libbitcoin::wallet::verify_message", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::payment_address const &","libbitcoin::wallet::verify_message", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_byte_arrayT_1_ec_signature_size_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "libbitcoin::wallet::message_signature const &","libbitcoin::wallet::verify_message", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::message_signature const &","libbitcoin::wallet::verify_message", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< libbitcoin::wallet::message_signature * >(argp3);
  result = (bool)libbitcoin::wallet::verify_message(arg1,(libbitcoin::wallet::payment_address const &)*arg2,(byte_array< 1+ec_signature_size > const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_recovery_id_to_magic(int argc, VALUE *argv, VALUE self) {
  uint8_t *arg1 = 0 ;
  uint8_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint8_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint8_t &","libbitcoin::wallet::recovery_id_to_magic", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t &","libbitcoin::wallet::recovery_id_to_magic", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< uint8_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::recovery_id_to_magic", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::recovery_id_to_magic", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","libbitcoin::wallet::recovery_id_to_magic", 3, argv[2] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)libbitcoin::wallet::recovery_id_to_magic(*arg1,arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_magic_to_recovery_id(int argc, VALUE *argv, VALUE self) {
  uint8_t *arg1 = 0 ;
  bool *arg2 = 0 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_uint8_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "uint8_t &","libbitcoin::wallet::magic_to_recovery_id", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t &","libbitcoin::wallet::magic_to_recovery_id", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< uint8_t * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "bool &","libbitcoin::wallet::magic_to_recovery_id", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "bool &","libbitcoin::wallet::magic_to_recovery_id", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::magic_to_recovery_id", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::magic_to_recovery_id", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< uint8_t * >(argp3));
    }
  }
  result = (bool)libbitcoin::wallet::magic_to_recovery_id(*arg1,*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_minikey_to_secret(int argc, VALUE *argv, VALUE self) {
  ec_secret *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_secret &","libbitcoin::wallet::minikey_to_secret", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret &","libbitcoin::wallet::minikey_to_secret", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_secret * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","libbitcoin::wallet::minikey_to_secret", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","libbitcoin::wallet::minikey_to_secret", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  result = (bool)libbitcoin::wallet::minikey_to_secret(*arg1,(std::string const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_mnemonic_word_multiple_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::mnemonic_word_multiple));
  return _val;
}


SWIGINTERN VALUE
_wrap_mnemonic_seed_multiple_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::mnemonic_seed_multiple));
  return _val;
}


SWIGINTERN VALUE
_wrap_create_mnemonic__SWIG_0(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< data_slice > arg1 ;
  libbitcoin::wallet::dictionary *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::word_list result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_data_slice,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "data_slice","libbitcoin::wallet::create_mnemonic", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_slice","libbitcoin::wallet::create_mnemonic", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< data_slice * >(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::dictionary const &","libbitcoin::wallet::create_mnemonic", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::dictionary const &","libbitcoin::wallet::create_mnemonic", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::dictionary * >(argp2);
  result = libbitcoin::wallet::create_mnemonic(arg1,(std::array< char const *,2048 > const &)*arg2);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::word_list(static_cast< const libbitcoin::wallet::word_list& >(result))), SWIGTYPE_p_string_list, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_create_mnemonic__SWIG_1(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< data_slice > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::word_list result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_data_slice,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "data_slice","libbitcoin::wallet::create_mnemonic", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_slice","libbitcoin::wallet::create_mnemonic", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< data_slice * >(argp1));
    }
  }
  result = libbitcoin::wallet::create_mnemonic(arg1);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::word_list(static_cast< const libbitcoin::wallet::word_list& >(result))), SWIGTYPE_p_string_list, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_create_mnemonic(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_data_slice, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_create_mnemonic__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_data_slice, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__arrayT_char_const_p_2048_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_create_mnemonic__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "create_mnemonic", 
    "    libbitcoin::wallet::word_list create_mnemonic(data_slice entropy, libbitcoin::wallet::dictionary const &lexicon)\n"
    "    libbitcoin::wallet::word_list create_mnemonic(data_slice entropy)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_validate_mnemonic__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::word_list *arg1 = 0 ;
  libbitcoin::wallet::dictionary *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_string_list,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::word_list const &","libbitcoin::wallet::validate_mnemonic", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::word_list const &","libbitcoin::wallet::validate_mnemonic", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::word_list * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__arrayT_char_const_p_2048_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::dictionary const &","libbitcoin::wallet::validate_mnemonic", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::dictionary const &","libbitcoin::wallet::validate_mnemonic", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::dictionary * >(argp2);
  result = (bool)libbitcoin::wallet::validate_mnemonic((string_list const &)*arg1,(std::array< char const *,2048 > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_validate_mnemonic__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::word_list *arg1 = 0 ;
  libbitcoin::wallet::dictionary_list *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_string_list,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::word_list const &","libbitcoin::wallet::validate_mnemonic", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::word_list const &","libbitcoin::wallet::validate_mnemonic", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::word_list * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::dictionary_list const &","libbitcoin::wallet::validate_mnemonic", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::dictionary_list const &","libbitcoin::wallet::validate_mnemonic", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::dictionary_list * >(argp2);
  result = (bool)libbitcoin::wallet::validate_mnemonic((string_list const &)*arg1,(std::vector< std::array< char const *,2048 > const * > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_validate_mnemonic__SWIG_2(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::word_list *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_string_list,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::word_list const &","libbitcoin::wallet::validate_mnemonic", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::word_list const &","libbitcoin::wallet::validate_mnemonic", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::word_list * >(argp1);
  result = (bool)libbitcoin::wallet::validate_mnemonic((string_list const &)*arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_validate_mnemonic(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_string_list, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_validate_mnemonic__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_string_list, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_validate_mnemonic__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_string_list, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__arrayT_char_const_p_2048_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_validate_mnemonic__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "validate_mnemonic", 
    "    bool validate_mnemonic(libbitcoin::wallet::word_list const &mnemonic, libbitcoin::wallet::dictionary const &lexicon)\n"
    "    bool validate_mnemonic(libbitcoin::wallet::word_list const &mnemonic, libbitcoin::wallet::dictionary_list const &lexicons)\n"
    "    bool validate_mnemonic(libbitcoin::wallet::word_list const &mnemonic)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_decode_mnemonic(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::word_list *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  long_hash result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_string_list,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::word_list const &","libbitcoin::wallet::decode_mnemonic", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::word_list const &","libbitcoin::wallet::decode_mnemonic", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::word_list * >(argp1);
  result = libbitcoin::wallet::decode_mnemonic((string_list const &)*arg1);
  vresult = SWIG_NewPointerObj((new long_hash(static_cast< const long_hash& >(result))), SWIGTYPE_p_long_hash, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_size_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::payment_size));
  return _val;
}


static swig_class SwigClassPayment_address;

SWIGINTERN VALUE
_wrap_payment_address_mainnet_p2kh_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::payment_address::mainnet_p2kh), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_payment_address_mainnet_p2sh_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::payment_address::mainnet_p2sh), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_payment_address_testnet_p2kh_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::payment_address::testnet_p2kh), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_payment_address_testnet_p2sh_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::payment_address::testnet_p2sh), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_payment_address_extract__SWIG_0(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","libbitcoin::wallet::payment_address::extract", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","libbitcoin::wallet::payment_address::extract", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::payment_address::extract", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::payment_address::extract", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::payment_address::extract", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::payment_address::extract", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< uint8_t * >(argp3));
    }
  }
  result = libbitcoin::wallet::payment_address::extract((chain::script const &)*arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_extract__SWIG_1(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","libbitcoin::wallet::payment_address::extract", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","libbitcoin::wallet::payment_address::extract", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::payment_address::extract", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::payment_address::extract", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = libbitcoin::wallet::payment_address::extract((chain::script const &)*arg1,arg2);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_extract__SWIG_2(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","libbitcoin::wallet::payment_address::extract", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","libbitcoin::wallet::payment_address::extract", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  result = libbitcoin::wallet::payment_address::extract((chain::script const &)*arg1);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_payment_address_extract(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_payment_address_extract__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_payment_address_extract__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_uint8_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_payment_address_extract__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "payment_address.extract", 
    "    libbitcoin::wallet::payment_address payment_address.extract(chain::script const &script, uint8_t p2kh_version, uint8_t p2sh_version)\n"
    "    libbitcoin::wallet::payment_address payment_address.extract(chain::script const &script, uint8_t p2kh_version)\n"
    "    libbitcoin::wallet::payment_address payment_address.extract(chain::script const &script)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_extract_input__SWIG_0(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","libbitcoin::wallet::payment_address::extract_input", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","libbitcoin::wallet::payment_address::extract_input", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::payment_address::extract_input", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::payment_address::extract_input", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::payment_address::extract_input", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::payment_address::extract_input", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< uint8_t * >(argp3));
    }
  }
  result = libbitcoin::wallet::payment_address::extract_input((chain::script const &)*arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_extract_input__SWIG_1(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","libbitcoin::wallet::payment_address::extract_input", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","libbitcoin::wallet::payment_address::extract_input", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::payment_address::extract_input", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::payment_address::extract_input", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = libbitcoin::wallet::payment_address::extract_input((chain::script const &)*arg1,arg2);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_extract_input__SWIG_2(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","libbitcoin::wallet::payment_address::extract_input", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","libbitcoin::wallet::payment_address::extract_input", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  result = libbitcoin::wallet::payment_address::extract_input((chain::script const &)*arg1);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_payment_address_extract_input(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_payment_address_extract_input__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_payment_address_extract_input__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_uint8_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_payment_address_extract_input__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "payment_address.extract_input", 
    "    libbitcoin::wallet::payment_address payment_address.extract_input(chain::script const &script, uint8_t p2kh_version, uint8_t p2sh_version)\n"
    "    libbitcoin::wallet::payment_address payment_address.extract_input(chain::script const &script, uint8_t p2kh_version)\n"
    "    libbitcoin::wallet::payment_address payment_address.extract_input(chain::script const &script)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_extract_output__SWIG_0(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","libbitcoin::wallet::payment_address::extract_output", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","libbitcoin::wallet::payment_address::extract_output", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::payment_address::extract_output", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::payment_address::extract_output", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::payment_address::extract_output", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::payment_address::extract_output", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< uint8_t * >(argp3));
    }
  }
  result = libbitcoin::wallet::payment_address::extract_output((chain::script const &)*arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_extract_output__SWIG_1(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","libbitcoin::wallet::payment_address::extract_output", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","libbitcoin::wallet::payment_address::extract_output", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","libbitcoin::wallet::payment_address::extract_output", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","libbitcoin::wallet::payment_address::extract_output", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = libbitcoin::wallet::payment_address::extract_output((chain::script const &)*arg1,arg2);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_extract_output__SWIG_2(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","libbitcoin::wallet::payment_address::extract_output", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","libbitcoin::wallet::payment_address::extract_output", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  result = libbitcoin::wallet::payment_address::extract_output((chain::script const &)*arg1);
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment_address(static_cast< const libbitcoin::wallet::payment_address& >(result))), SWIGTYPE_p_libbitcoin__wallet__payment_address, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_payment_address_extract_output(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_payment_address_extract_output__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_payment_address_extract_output__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_uint8_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_payment_address_extract_output__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "payment_address.extract_output", 
    "    libbitcoin::wallet::payment_address payment_address.extract_output(chain::script const &script, uint8_t p2kh_version, uint8_t p2sh_version)\n"
    "    libbitcoin::wallet::payment_address payment_address.extract_output(chain::script const &script, uint8_t p2kh_version)\n"
    "    libbitcoin::wallet::payment_address payment_address.extract_output(chain::script const &script)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_byte_arrayT_1u_short_hash_size_checksum_size_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::payment const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment * >(argp1);
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((libbitcoin::wallet::payment const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_2(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_private *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__ec_private,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_private const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_private const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_private * >(argp1);
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((libbitcoin::wallet::ec_private const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_4(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__payment_address,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::payment_address const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp1);
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((libbitcoin::wallet::payment_address const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_5(int argc, VALUE *argv, VALUE self) {
  short_hash *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_short_hash,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "short_hash const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "short_hash const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< short_hash * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","payment_address", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","payment_address", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((short_hash const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_6(int argc, VALUE *argv, VALUE self) {
  short_hash *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_short_hash,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "short_hash const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "short_hash const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< short_hash * >(argp1);
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((short_hash const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_7(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__ec_public,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_public const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","payment_address", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","payment_address", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((libbitcoin::wallet::ec_public const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_8(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::ec_public *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__ec_public,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::ec_public const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::ec_public const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::ec_public * >(argp1);
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((libbitcoin::wallet::ec_public const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_9(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","payment_address", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","payment_address", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((chain::script const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_payment_address_allocate(VALUE self)
#else
_wrap_payment_address_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__payment_address);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_payment_address__SWIG_10(int argc, VALUE *argv, VALUE self) {
  chain::script *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__script,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::script const &","payment_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::script const &","payment_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::script * >(argp1);
  result = (libbitcoin::wallet::payment_address *)new libbitcoin::wallet::payment_address((chain::script const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_payment_address(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_payment_address__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_byte_arrayT_1u_short_hash_size_checksum_size_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_payment_address__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ec_private, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_payment_address__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_payment_address__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__payment_address, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_payment_address__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_short_hash, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_payment_address__SWIG_6(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ec_public, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_payment_address__SWIG_8(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_payment_address__SWIG_10(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_short_hash, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_payment_address__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__script, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_payment_address__SWIG_9(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__ec_public, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_payment_address__SWIG_7(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "payment_address.new", 
    "    payment_address.new()\n"
    "    payment_address.new(libbitcoin::wallet::payment const &decoded)\n"
    "    payment_address.new(libbitcoin::wallet::ec_private const &secret)\n"
    "    payment_address.new(std::string const &address)\n"
    "    payment_address.new(libbitcoin::wallet::payment_address const &other)\n"
    "    payment_address.new(short_hash const &hash, uint8_t version)\n"
    "    payment_address.new(short_hash const &hash)\n"
    "    payment_address.new(libbitcoin::wallet::ec_public const &point, uint8_t version)\n"
    "    payment_address.new(libbitcoin::wallet::ec_public const &point)\n"
    "    payment_address.new(chain::script const &script, uint8_t version)\n"
    "    payment_address.new(chain::script const &script)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::payment_address.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_payment_address___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *arg1 = (libbitcoin::wallet::payment_address *) 0 ;
  libbitcoin::wallet::payment_address *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__payment_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__payment_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::payment_address const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp2);
  result = (bool)((libbitcoin::wallet::payment_address const *)arg1)->operator <((libbitcoin::wallet::payment_address const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::payment_address.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_payment_address___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *arg1 = (libbitcoin::wallet::payment_address *) 0 ;
  libbitcoin::wallet::payment_address *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__payment_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__payment_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::payment_address const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp2);
  result = (bool)((libbitcoin::wallet::payment_address const *)arg1)->operator ==((libbitcoin::wallet::payment_address const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *arg1 = (libbitcoin::wallet::payment_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__payment_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp1);
  result = (bool)((libbitcoin::wallet::payment_address const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_short_hash(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *arg1 = (libbitcoin::wallet::payment_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short_hash *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__payment_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const *","operator const short_hash&", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp1);
  result = (short_hash *) &((libbitcoin::wallet::payment_address const *)arg1)->operator const short_hash&();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short_hash, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *arg1 = (libbitcoin::wallet::payment_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__payment_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp1);
  result = ((libbitcoin::wallet::payment_address const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_version(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *arg1 = (libbitcoin::wallet::payment_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__payment_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp1);
  result = ((libbitcoin::wallet::payment_address const *)arg1)->version();
  vresult = SWIG_NewPointerObj((new uint8_t(static_cast< const uint8_t& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::payment_address.hash

  call-seq:
    hash -> short_hash const &

Hashing function for class.
*/
SWIGINTERN VALUE
_wrap_payment_address_hash(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *arg1 = (libbitcoin::wallet::payment_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short_hash *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__payment_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const *","hash", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp1);
  result = (short_hash *) &((libbitcoin::wallet::payment_address const *)arg1)->hash();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short_hash, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_payment_address_to_payment(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::payment_address *arg1 = (libbitcoin::wallet::payment_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__payment_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address const *","to_payment", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp1);
  result = ((libbitcoin::wallet::payment_address const *)arg1)->to_payment();
  vresult = SWIG_NewPointerObj((new libbitcoin::wallet::payment(static_cast< const libbitcoin::wallet::payment& >(result))), SWIGTYPE_p_byte_arrayT_1u_short_hash_size_checksum_size_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_payment_address(void *self) {
    libbitcoin::wallet::payment_address *arg1 = (libbitcoin::wallet::payment_address *)self;
    delete arg1;
}

static swig_class SwigClassWrapped_data;

SWIGINTERN VALUE
_wrap_wrapped_data_version_set(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wrapped_data *arg1 = (libbitcoin::wallet::wrapped_data *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__wrapped_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wrapped_data *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wrapped_data * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint8_t","version", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","version", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint8_t * >(argp2));
    }
  }
  if (arg1) (arg1)->version = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_wrapped_data_version_get(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wrapped_data *arg1 = (libbitcoin::wallet::wrapped_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__wrapped_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wrapped_data *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wrapped_data * >(argp1);
  result =  ((arg1)->version);
  vresult = SWIG_NewPointerObj((new uint8_t(static_cast< const uint8_t& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_wrapped_data_payload_set(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wrapped_data *arg1 = (libbitcoin::wallet::wrapped_data *) 0 ;
  data_chunk arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__wrapped_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wrapped_data *","payload", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wrapped_data * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_data_chunk,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "data_chunk","payload", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk","payload", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< data_chunk * >(argp2));
    }
  }
  if (arg1) (arg1)->payload = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_wrapped_data_payload_get(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wrapped_data *arg1 = (libbitcoin::wallet::wrapped_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  data_chunk result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__wrapped_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wrapped_data *","payload", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wrapped_data * >(argp1);
  result =  ((arg1)->payload);
  vresult = SWIG_NewPointerObj((new data_chunk(static_cast< const data_chunk& >(result))), SWIGTYPE_p_data_chunk, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_wrapped_data_checksum_set(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wrapped_data *arg1 = (libbitcoin::wallet::wrapped_data *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__wrapped_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wrapped_data *","checksum", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wrapped_data * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "uint32_t","checksum", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint32_t","checksum", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< uint32_t * >(argp2));
    }
  }
  if (arg1) (arg1)->checksum = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_wrapped_data_checksum_get(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wrapped_data *arg1 = (libbitcoin::wallet::wrapped_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__wrapped_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::wrapped_data *","checksum", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::wrapped_data * >(argp1);
  result =  ((arg1)->checksum);
  vresult = SWIG_NewPointerObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_wrapped_data_allocate(VALUE self)
#else
_wrap_wrapped_data_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__wrapped_data);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_wrapped_data(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::wrapped_data *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::wrapped_data *)new libbitcoin::wallet::wrapped_data();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_wrapped_data(void *self) {
    libbitcoin::wallet::wrapped_data *arg1 = (libbitcoin::wallet::wrapped_data *)self;
    delete arg1;
}

static swig_class SwigClassSelect_outputs;


/*
  Document-method: Libbitcoin::select_outputs.select

  call-seq:
    select(out, unspent, minimum_value, option=greedy)
    select(out, unspent, minimum_value)

Iterate thru each element in the select_outputs and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_select_outputs_select__SWIG_0(int argc, VALUE *argv, VALUE self) {
  chain::points_value *arg1 = 0 ;
  chain::points_value *arg2 = 0 ;
  uint64_t arg3 ;
  libbitcoin::wallet::select_outputs::algorithm arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__points_value,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::points_value &","libbitcoin::wallet::select_outputs::select", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::points_value &","libbitcoin::wallet::select_outputs::select", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::points_value * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_chain__points_value,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "chain::points_value const &","libbitcoin::wallet::select_outputs::select", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::points_value const &","libbitcoin::wallet::select_outputs::select", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< chain::points_value * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "uint64_t","libbitcoin::wallet::select_outputs::select", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","libbitcoin::wallet::select_outputs::select", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< uint64_t * >(argp3));
    }
  }
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "libbitcoin::wallet::select_outputs::algorithm","libbitcoin::wallet::select_outputs::select", 4, argv[3] ));
  } 
  arg4 = static_cast< libbitcoin::wallet::select_outputs::algorithm >(val4);
  libbitcoin::wallet::select_outputs::select(*arg1,(chain::points_value const &)*arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_select_outputs_select__SWIG_1(int argc, VALUE *argv, VALUE self) {
  chain::points_value *arg1 = 0 ;
  chain::points_value *arg2 = 0 ;
  uint64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_chain__points_value,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "chain::points_value &","libbitcoin::wallet::select_outputs::select", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::points_value &","libbitcoin::wallet::select_outputs::select", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< chain::points_value * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_chain__points_value,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "chain::points_value const &","libbitcoin::wallet::select_outputs::select", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "chain::points_value const &","libbitcoin::wallet::select_outputs::select", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< chain::points_value * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "uint64_t","libbitcoin::wallet::select_outputs::select", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint64_t","libbitcoin::wallet::select_outputs::select", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< uint64_t * >(argp3));
    }
  }
  libbitcoin::wallet::select_outputs::select(*arg1,(chain::points_value const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_select_outputs_select(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__points_value, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_chain__points_value, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_uint64_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_select_outputs_select__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_chain__points_value, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_chain__points_value, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_uint64_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_select_outputs_select__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "select_outputs.select", 
    "    void select_outputs.select(chain::points_value &out, chain::points_value const &unspent, uint64_t minimum_value, libbitcoin::wallet::select_outputs::algorithm option)\n"
    "    void select_outputs.select(chain::points_value &out, chain::points_value const &unspent, uint64_t minimum_value)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_select_outputs_allocate(VALUE self)
#else
_wrap_select_outputs_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__select_outputs);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_select_outputs(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::select_outputs *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::select_outputs *)new libbitcoin::wallet::select_outputs();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_select_outputs(void *self) {
    libbitcoin::wallet::select_outputs *arg1 = (libbitcoin::wallet::select_outputs *)self;
    delete arg1;
}

static swig_class SwigClassStealth_address;

SWIGINTERN VALUE
_wrap_stealth_address_mainnet_p2kh_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::stealth_address::mainnet_p2kh), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_stealth_address_reuse_key_flag_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&libbitcoin::wallet::stealth_address::reuse_key_flag), SWIGTYPE_p_uint8_t,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_stealth_address_min_filter_bits_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::stealth_address::min_filter_bits));
  return _val;
}


SWIGINTERN VALUE
_wrap_stealth_address_max_filter_bits_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_size_t(static_cast< size_t >(libbitcoin::wallet::stealth_address::max_filter_bits));
  return _val;
}


SWIGINTERN VALUE
_wrap_new_stealth_address__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (libbitcoin::wallet::stealth_address *)new libbitcoin::wallet::stealth_address();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_stealth_address__SWIG_1(int argc, VALUE *argv, VALUE self) {
  data_chunk *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::stealth_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_data_chunk,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "data_chunk const &","stealth_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk const &","stealth_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< data_chunk * >(argp1);
  result = (libbitcoin::wallet::stealth_address *)new libbitcoin::wallet::stealth_address((data_chunk const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_stealth_address__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::stealth_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::string const &","stealth_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","stealth_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (libbitcoin::wallet::stealth_address *)new libbitcoin::wallet::stealth_address((std::string const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_stealth_address__SWIG_3(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  libbitcoin::wallet::stealth_address *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__stealth_address,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const &","stealth_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::stealth_address const &","stealth_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = (libbitcoin::wallet::stealth_address *)new libbitcoin::wallet::stealth_address((libbitcoin::wallet::stealth_address const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_stealth_address__SWIG_4(int argc, VALUE *argv, VALUE self) {
  binary *arg1 = 0 ;
  ec_compressed *arg2 = 0 ;
  point_list *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  libbitcoin::wallet::stealth_address *result = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_binary,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "binary const &","stealth_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "binary const &","stealth_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< binary * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ec_compressed const &","stealth_address", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed const &","stealth_address", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ec_compressed * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_point_list,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "point_list const &","stealth_address", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "point_list const &","stealth_address", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< point_list * >(argp3);
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "uint8_t","stealth_address", 4, argv[3] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","stealth_address", 4, argv[3]));
    } else {
      arg4 = *(reinterpret_cast< uint8_t * >(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "uint8_t","stealth_address", 5, argv[4] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","stealth_address", 5, argv[4]));
    } else {
      arg5 = *(reinterpret_cast< uint8_t * >(argp5));
    }
  }
  result = (libbitcoin::wallet::stealth_address *)new libbitcoin::wallet::stealth_address((binary const &)*arg1,(ec_compressed const &)*arg2,(point_list const &)*arg3,arg4,arg5);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_stealth_address__SWIG_5(int argc, VALUE *argv, VALUE self) {
  binary *arg1 = 0 ;
  ec_compressed *arg2 = 0 ;
  point_list *arg3 = 0 ;
  uint8_t arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  libbitcoin::wallet::stealth_address *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_binary,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "binary const &","stealth_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "binary const &","stealth_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< binary * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ec_compressed const &","stealth_address", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed const &","stealth_address", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ec_compressed * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_point_list,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "point_list const &","stealth_address", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "point_list const &","stealth_address", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< point_list * >(argp3);
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "uint8_t","stealth_address", 4, argv[3] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","stealth_address", 4, argv[3]));
    } else {
      arg4 = *(reinterpret_cast< uint8_t * >(argp4));
    }
  }
  result = (libbitcoin::wallet::stealth_address *)new libbitcoin::wallet::stealth_address((binary const &)*arg1,(ec_compressed const &)*arg2,(point_list const &)*arg3,arg4);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_stealth_address_allocate(VALUE self)
#else
_wrap_stealth_address_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__stealth_address);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_stealth_address__SWIG_6(int argc, VALUE *argv, VALUE self) {
  binary *arg1 = 0 ;
  ec_compressed *arg2 = 0 ;
  point_list *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  libbitcoin::wallet::stealth_address *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_binary,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "binary const &","stealth_address", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "binary const &","stealth_address", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< binary * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ec_compressed const &","stealth_address", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed const &","stealth_address", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ec_compressed * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_point_list,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "point_list const &","stealth_address", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "point_list const &","stealth_address", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< point_list * >(argp3);
  result = (libbitcoin::wallet::stealth_address *)new libbitcoin::wallet::stealth_address((binary const &)*arg1,(ec_compressed const &)*arg2,(point_list const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_stealth_address(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs;
  if (argc > 5) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_stealth_address__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_data_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_stealth_address__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_stealth_address__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_stealth_address__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_binary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ec_compressed, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_point_list, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_stealth_address__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_binary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ec_compressed, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_point_list, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_uint8_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_stealth_address__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_binary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ec_compressed, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_point_list, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_uint8_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_uint8_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_stealth_address__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "stealth_address.new", 
    "    stealth_address.new()\n"
    "    stealth_address.new(data_chunk const &decoded)\n"
    "    stealth_address.new(std::string const &encoded)\n"
    "    stealth_address.new(libbitcoin::wallet::stealth_address const &other)\n"
    "    stealth_address.new(binary const &filter, ec_compressed const &scan_key, point_list const &spend_keys, uint8_t signatures, uint8_t version)\n"
    "    stealth_address.new(binary const &filter, ec_compressed const &scan_key, point_list const &spend_keys, uint8_t signatures)\n"
    "    stealth_address.new(binary const &filter, ec_compressed const &scan_key, point_list const &spend_keys)\n");
  
  return Qnil;
}



/*
  Document-method: Libbitcoin::stealth_address.<

  call-seq:
    <(other) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_stealth_address___lt__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  libbitcoin::wallet::stealth_address *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__stealth_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::stealth_address const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp2);
  result = (bool)((libbitcoin::wallet::stealth_address const *)arg1)->operator <((libbitcoin::wallet::stealth_address const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Libbitcoin::stealth_address.==

  call-seq:
    ==(other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_stealth_address___eq__(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  libbitcoin::wallet::stealth_address *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__stealth_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::stealth_address const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp2);
  result = (bool)((libbitcoin::wallet::stealth_address const *)arg1)->operator ==((libbitcoin::wallet::stealth_address const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_address_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = (bool)((libbitcoin::wallet::stealth_address const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_address_data_chunk(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  data_chunk result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","operator const data_chunk", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = ((libbitcoin::wallet::stealth_address const *)arg1)->operator const data_chunk();
  vresult = SWIG_NewPointerObj((new data_chunk(static_cast< const data_chunk& >(result))), SWIGTYPE_p_data_chunk, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_address_encoded(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","encoded", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = ((libbitcoin::wallet::stealth_address const *)arg1)->encoded();
  vresult = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_address_version(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = ((libbitcoin::wallet::stealth_address const *)arg1)->version();
  vresult = SWIG_NewPointerObj((new uint8_t(static_cast< const uint8_t& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_address_scan_key(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ec_compressed *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","scan_key", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = (ec_compressed *) &((libbitcoin::wallet::stealth_address const *)arg1)->scan_key();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ec_compressed, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_address_spend_keys(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  point_list *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","spend_keys", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = (point_list *) &((libbitcoin::wallet::stealth_address const *)arg1)->spend_keys();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_point_list, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_address_signatures(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","signatures", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = ((libbitcoin::wallet::stealth_address const *)arg1)->signatures();
  vresult = SWIG_NewPointerObj((new uint8_t(static_cast< const uint8_t& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_address_filter(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  binary *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","filter", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = (binary *) &((libbitcoin::wallet::stealth_address const *)arg1)->filter();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_binary, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_address_to_chunk(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  data_chunk result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const *","to_chunk", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  result = ((libbitcoin::wallet::stealth_address const *)arg1)->to_chunk();
  vresult = SWIG_NewPointerObj((new data_chunk(static_cast< const data_chunk& >(result))), SWIGTYPE_p_data_chunk, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_stealth_address(void *self) {
    libbitcoin::wallet::stealth_address *arg1 = (libbitcoin::wallet::stealth_address *)self;
    delete arg1;
}

static swig_class SwigClassStealth_receiver;

SWIGINTERN VALUE
_wrap_new_stealth_receiver__SWIG_0(int argc, VALUE *argv, VALUE self) {
  ec_secret *arg1 = 0 ;
  ec_secret *arg2 = 0 ;
  binary *arg3 = 0 ;
  uint8_t arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  libbitcoin::wallet::stealth_receiver *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_secret const &","stealth_receiver", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","stealth_receiver", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_secret * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ec_secret const &","stealth_receiver", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","stealth_receiver", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ec_secret * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_binary,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "binary const &","stealth_receiver", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "binary const &","stealth_receiver", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< binary * >(argp3);
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "uint8_t","stealth_receiver", 4, argv[3] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","stealth_receiver", 4, argv[3]));
    } else {
      arg4 = *(reinterpret_cast< uint8_t * >(argp4));
    }
  }
  result = (libbitcoin::wallet::stealth_receiver *)new libbitcoin::wallet::stealth_receiver((ec_secret const &)*arg1,(ec_secret const &)*arg2,(binary const &)*arg3,arg4);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_stealth_receiver_allocate(VALUE self)
#else
_wrap_stealth_receiver_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__stealth_receiver);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_stealth_receiver__SWIG_1(int argc, VALUE *argv, VALUE self) {
  ec_secret *arg1 = 0 ;
  ec_secret *arg2 = 0 ;
  binary *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  libbitcoin::wallet::stealth_receiver *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_secret const &","stealth_receiver", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","stealth_receiver", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_secret * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ec_secret const &","stealth_receiver", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","stealth_receiver", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ec_secret * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_binary,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "binary const &","stealth_receiver", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "binary const &","stealth_receiver", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< binary * >(argp3);
  result = (libbitcoin::wallet::stealth_receiver *)new libbitcoin::wallet::stealth_receiver((ec_secret const &)*arg1,(ec_secret const &)*arg2,(binary const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_stealth_receiver(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_secret, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ec_secret, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_binary, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_stealth_receiver__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_secret, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ec_secret, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_binary, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_uint8_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_stealth_receiver__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "stealth_receiver.new", 
    "    stealth_receiver.new(ec_secret const &scan_private, ec_secret const &spend_private, binary const &filter, uint8_t version)\n"
    "    stealth_receiver.new(ec_secret const &scan_private, ec_secret const &spend_private, binary const &filter)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_receiver_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_receiver *arg1 = (libbitcoin::wallet::stealth_receiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_receiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_receiver const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_receiver * >(argp1);
  result = (bool)((libbitcoin::wallet::stealth_receiver const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_receiver_stealth_address(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_receiver *arg1 = (libbitcoin::wallet::stealth_receiver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::stealth_address *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_receiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_receiver const *","stealth_address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_receiver * >(argp1);
  result = (libbitcoin::wallet::stealth_address *) &((libbitcoin::wallet::stealth_receiver const *)arg1)->stealth_address();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_receiver_derive_address(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_receiver *arg1 = (libbitcoin::wallet::stealth_receiver *) 0 ;
  libbitcoin::wallet::payment_address *arg2 = 0 ;
  ec_compressed *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_receiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_receiver const *","derive_address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_receiver * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_libbitcoin__wallet__payment_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::payment_address &","derive_address", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::payment_address &","derive_address", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::payment_address * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "ec_compressed const &","derive_address", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed const &","derive_address", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< ec_compressed * >(argp3);
  result = (bool)((libbitcoin::wallet::stealth_receiver const *)arg1)->derive_address(*arg2,(ec_compressed const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_receiver_derive_private(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_receiver *arg1 = (libbitcoin::wallet::stealth_receiver *) 0 ;
  ec_secret *arg2 = 0 ;
  ec_compressed *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_receiver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_receiver const *","derive_private", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_receiver * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ec_secret &","derive_private", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret &","derive_private", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ec_secret * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_ec_compressed,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "ec_compressed const &","derive_private", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_compressed const &","derive_private", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< ec_compressed * >(argp3);
  result = (bool)((libbitcoin::wallet::stealth_receiver const *)arg1)->derive_private(*arg2,(ec_compressed const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_stealth_receiver(void *self) {
    libbitcoin::wallet::stealth_receiver *arg1 = (libbitcoin::wallet::stealth_receiver *)self;
    delete arg1;
}

static swig_class SwigClassStealth_sender;

SWIGINTERN VALUE
_wrap_new_stealth_sender__SWIG_0(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = 0 ;
  data_chunk *arg2 = 0 ;
  binary *arg3 = 0 ;
  uint8_t arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  libbitcoin::wallet::stealth_sender *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__stealth_address,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const &","stealth_sender", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::stealth_address const &","stealth_sender", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_data_chunk,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "data_chunk const &","stealth_sender", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk const &","stealth_sender", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< data_chunk * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_binary,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "binary const &","stealth_sender", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "binary const &","stealth_sender", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< binary * >(argp3);
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "uint8_t","stealth_sender", 4, argv[3] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","stealth_sender", 4, argv[3]));
    } else {
      arg4 = *(reinterpret_cast< uint8_t * >(argp4));
    }
  }
  result = (libbitcoin::wallet::stealth_sender *)new libbitcoin::wallet::stealth_sender((libbitcoin::wallet::stealth_address const &)*arg1,(data_chunk const &)*arg2,(binary const &)*arg3,arg4);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_stealth_sender__SWIG_1(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_address *arg1 = 0 ;
  data_chunk *arg2 = 0 ;
  binary *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  libbitcoin::wallet::stealth_sender *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_libbitcoin__wallet__stealth_address,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const &","stealth_sender", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::stealth_address const &","stealth_sender", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_data_chunk,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "data_chunk const &","stealth_sender", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk const &","stealth_sender", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< data_chunk * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_binary,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "binary const &","stealth_sender", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "binary const &","stealth_sender", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< binary * >(argp3);
  result = (libbitcoin::wallet::stealth_sender *)new libbitcoin::wallet::stealth_sender((libbitcoin::wallet::stealth_address const &)*arg1,(data_chunk const &)*arg2,(binary const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_stealth_sender__SWIG_2(int argc, VALUE *argv, VALUE self) {
  ec_secret *arg1 = 0 ;
  libbitcoin::wallet::stealth_address *arg2 = 0 ;
  data_chunk *arg3 = 0 ;
  binary *arg4 = 0 ;
  uint8_t arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  libbitcoin::wallet::stealth_sender *result = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_secret const &","stealth_sender", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","stealth_sender", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_secret * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_libbitcoin__wallet__stealth_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const &","stealth_sender", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::stealth_address const &","stealth_sender", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_data_chunk,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "data_chunk const &","stealth_sender", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk const &","stealth_sender", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< data_chunk * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_binary,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "binary const &","stealth_sender", 4, argv[3] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "binary const &","stealth_sender", 4, argv[3])); 
  }
  arg4 = reinterpret_cast< binary * >(argp4);
  {
    res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "uint8_t","stealth_sender", 5, argv[4] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "uint8_t","stealth_sender", 5, argv[4]));
    } else {
      arg5 = *(reinterpret_cast< uint8_t * >(argp5));
    }
  }
  result = (libbitcoin::wallet::stealth_sender *)new libbitcoin::wallet::stealth_sender((ec_secret const &)*arg1,(libbitcoin::wallet::stealth_address const &)*arg2,(data_chunk const &)*arg3,(binary const &)*arg4,arg5);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_stealth_sender_allocate(VALUE self)
#else
_wrap_stealth_sender_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_libbitcoin__wallet__stealth_sender);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_stealth_sender__SWIG_3(int argc, VALUE *argv, VALUE self) {
  ec_secret *arg1 = 0 ;
  libbitcoin::wallet::stealth_address *arg2 = 0 ;
  data_chunk *arg3 = 0 ;
  binary *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  libbitcoin::wallet::stealth_sender *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ec_secret,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ec_secret const &","stealth_sender", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ec_secret const &","stealth_sender", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ec_secret * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_libbitcoin__wallet__stealth_address,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_address const &","stealth_sender", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "libbitcoin::wallet::stealth_address const &","stealth_sender", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< libbitcoin::wallet::stealth_address * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_data_chunk,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "data_chunk const &","stealth_sender", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "data_chunk const &","stealth_sender", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< data_chunk * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_binary,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "binary const &","stealth_sender", 4, argv[3] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "binary const &","stealth_sender", 4, argv[3])); 
  }
  arg4 = reinterpret_cast< binary * >(argp4);
  result = (libbitcoin::wallet::stealth_sender *)new libbitcoin::wallet::stealth_sender((ec_secret const &)*arg1,(libbitcoin::wallet::stealth_address const &)*arg2,(data_chunk const &)*arg3,(binary const &)*arg4);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_stealth_sender(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs;
  if (argc > 5) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_data_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_binary, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_stealth_sender__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_data_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_binary, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_uint8_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_stealth_sender__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_secret, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_data_chunk, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_binary, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_stealth_sender__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ec_secret, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_libbitcoin__wallet__stealth_address, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_data_chunk, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_binary, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_uint8_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_stealth_sender__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "stealth_sender.new", 
    "    stealth_sender.new(libbitcoin::wallet::stealth_address const &address, data_chunk const &seed, binary const &filter, uint8_t version)\n"
    "    stealth_sender.new(libbitcoin::wallet::stealth_address const &address, data_chunk const &seed, binary const &filter)\n"
    "    stealth_sender.new(ec_secret const &ephemeral_private, libbitcoin::wallet::stealth_address const &address, data_chunk const &seed, binary const &filter, uint8_t version)\n"
    "    stealth_sender.new(ec_secret const &ephemeral_private, libbitcoin::wallet::stealth_address const &address, data_chunk const &seed, binary const &filter)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_sender_presentq___(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_sender *arg1 = (libbitcoin::wallet::stealth_sender *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_sender, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_sender const *","operator const bool", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_sender * >(argp1);
  result = (bool)((libbitcoin::wallet::stealth_sender const *)arg1)->operator const bool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_sender_stealth_script(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_sender *arg1 = (libbitcoin::wallet::stealth_sender *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  chain::script *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_sender, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_sender const *","stealth_script", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_sender * >(argp1);
  result = (chain::script *) &((libbitcoin::wallet::stealth_sender const *)arg1)->stealth_script();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_chain__script, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stealth_sender_payment_address(int argc, VALUE *argv, VALUE self) {
  libbitcoin::wallet::stealth_sender *arg1 = (libbitcoin::wallet::stealth_sender *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  libbitcoin::wallet::payment_address *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_libbitcoin__wallet__stealth_sender, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "libbitcoin::wallet::stealth_sender const *","payment_address", 1, self )); 
  }
  arg1 = reinterpret_cast< libbitcoin::wallet::stealth_sender * >(argp1);
  result = (libbitcoin::wallet::payment_address *) &((libbitcoin::wallet::stealth_sender const *)arg1)->payment_address();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_libbitcoin__wallet__payment_address, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_libbitcoin_wallet_stealth_sender(void *self) {
    libbitcoin::wallet::stealth_sender *arg1 = (libbitcoin::wallet::stealth_sender *)self;
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_libbitcoin__wallet__hd_privateTo_p_libbitcoin__wallet__hd_public(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libbitcoin::wallet::hd_public *)  ((libbitcoin::wallet::hd_private *) x));
}
static void *_p_libbitcoin__wallet__bitcoin_uriTo_p_libbitcoin__wallet__uri_reader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((libbitcoin::wallet::uri_reader *)  ((libbitcoin::wallet::bitcoin_uri *) x));
}
static swig_type_info _swigt__p_binary = {"_p_binary", "binary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__system__error_code = {"_p_boost__system__error_code", "boost::system::error_code *|libbitcoin::boost_code *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_1_ec_signature_size_t = {"_p_byte_arrayT_1_ec_signature_size_t", "libbitcoin::wallet::message_signature *|byte_array< 1+ec_signature_size > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_1u_short_hash_size_checksum_size_t = {"_p_byte_arrayT_1u_short_hash_size_checksum_size_t", "libbitcoin::wallet::payment *|byte_array< 1u+short_hash_size+checksum_size > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_24_t = {"_p_byte_arrayT_24_t", "libbitcoin::wallet::ek_seed *|byte_array< 24 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_32_t = {"_p_byte_arrayT_32_t", "byte_array< 32 > *|libbitcoin::wallet::hd_chain_code *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_37u_t = {"_p_byte_arrayT_37u_t", "byte_array< 37u > *|libbitcoin::wallet::wif_uncompressed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_43_t = {"_p_byte_arrayT_43_t", "libbitcoin::wallet::encrypted_private *|byte_array< 43 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_4_t = {"_p_byte_arrayT_4_t", "byte_array< 4 > *|libbitcoin::wallet::ek_salt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_53_t = {"_p_byte_arrayT_53_t", "libbitcoin::wallet::encrypted_token *|byte_array< 53 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_55_t = {"_p_byte_arrayT_55_t", "byte_array< 55 > *|libbitcoin::wallet::encrypted_public *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_82_t = {"_p_byte_arrayT_82_t", "byte_array< 82 > *|libbitcoin::wallet::hd_key *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_8_t = {"_p_byte_arrayT_8_t", "libbitcoin::wallet::ek_entropy *|byte_array< 8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte_arrayT_wif_uncompressed_size_1u_t = {"_p_byte_arrayT_wif_uncompressed_size_1u_t", "byte_array< wif_uncompressed_size+1u > *|libbitcoin::wallet::wif_compressed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_chain__points_value = {"_p_chain__points_value", "chain::points_value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_chain__script = {"_p_chain__script", "chain::script *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_config__checkpoint = {"_p_config__checkpoint", "config::checkpoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_data_chunk = {"_p_data_chunk", "data_chunk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_data_slice = {"_p_data_slice", "data_slice *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ec_compressed = {"_p_ec_compressed", "ec_compressed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ec_public = {"_p_ec_public", "ec_public *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ec_secret = {"_p_ec_secret", "ec_secret *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ec_uncompressed = {"_p_ec_uncompressed", "ec_uncompressed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_encrypted_private = {"_p_encrypted_private", "encrypted_private *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_encrypted_public = {"_p_encrypted_public", "encrypted_public *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_encrypted_token = {"_p_encrypted_token", "encrypted_token *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hash_digest = {"_p_hash_digest", "hash_digest *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__bitcoin_uri = {"_p_libbitcoin__wallet__bitcoin_uri", "libbitcoin::wallet::bitcoin_uri *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__ec_private = {"_p_libbitcoin__wallet__ec_private", "libbitcoin::wallet::ec_private *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__ec_public = {"_p_libbitcoin__wallet__ec_public", "libbitcoin::wallet::ec_public *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__ek_private = {"_p_libbitcoin__wallet__ek_private", "libbitcoin::wallet::ek_private *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__ek_public = {"_p_libbitcoin__wallet__ek_public", "libbitcoin::wallet::ek_public *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__ek_token = {"_p_libbitcoin__wallet__ek_token", "libbitcoin::wallet::ek_token *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__hd_lineage = {"_p_libbitcoin__wallet__hd_lineage", "libbitcoin::wallet::hd_lineage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__hd_private = {"_p_libbitcoin__wallet__hd_private", "libbitcoin::wallet::hd_private *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__hd_public = {"_p_libbitcoin__wallet__hd_public", "libbitcoin::wallet::hd_public *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__payment_address = {"_p_libbitcoin__wallet__payment_address", "libbitcoin::wallet::payment_address *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__select_outputs = {"_p_libbitcoin__wallet__select_outputs", "libbitcoin::wallet::select_outputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__stealth_address = {"_p_libbitcoin__wallet__stealth_address", "libbitcoin::wallet::stealth_address *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__stealth_receiver = {"_p_libbitcoin__wallet__stealth_receiver", "libbitcoin::wallet::stealth_receiver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__stealth_sender = {"_p_libbitcoin__wallet__stealth_sender", "libbitcoin::wallet::stealth_sender *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__uri = {"_p_libbitcoin__wallet__uri", "libbitcoin::wallet::uri *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__uri_reader = {"_p_libbitcoin__wallet__uri_reader", "libbitcoin::wallet::uri_reader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libbitcoin__wallet__wrapped_data = {"_p_libbitcoin__wallet__wrapped_data", "libbitcoin::wallet::wrapped_data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_hash = {"_p_long_hash", "long_hash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_payment_address = {"_p_payment_address", "payment_address *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_point_list = {"_p_point_list", "point_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ptr = {"_p_ptr", "ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_query_map = {"_p_query_map", "query_map *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short_hash = {"_p_short_hash", "short_hash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_char_const_p_2048_t = {"_p_std__arrayT_char_const_p_2048_t", "std::array< char const *,2048 > *|libbitcoin::wallet::dictionary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__error_code = {"_p_std__error_code", "std::error_code *|libbitcoin::code *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__error_condition = {"_p_std__error_condition", "std::error_condition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fstd__error_code_const_RF_t = {"_p_std__functionT_void_fstd__error_code_const_RF_t", "libbitcoin::handle0 *|std::function< void (std::error_code const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "libbitcoin::wallet::uri::query_map *|std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t = {"_p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t", "std::vector< std::array< char const *,2048 > const * > *|libbitcoin::wallet::dictionary_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stealth_address = {"_p_stealth_address", "stealth_address *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string_list = {"_p_string_list", "string_list *|libbitcoin::wallet::word_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "uint8_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_binary,
  &_swigt__p_bool,
  &_swigt__p_boost__system__error_code,
  &_swigt__p_byte_arrayT_1_ec_signature_size_t,
  &_swigt__p_byte_arrayT_1u_short_hash_size_checksum_size_t,
  &_swigt__p_byte_arrayT_24_t,
  &_swigt__p_byte_arrayT_32_t,
  &_swigt__p_byte_arrayT_37u_t,
  &_swigt__p_byte_arrayT_43_t,
  &_swigt__p_byte_arrayT_4_t,
  &_swigt__p_byte_arrayT_53_t,
  &_swigt__p_byte_arrayT_55_t,
  &_swigt__p_byte_arrayT_82_t,
  &_swigt__p_byte_arrayT_8_t,
  &_swigt__p_byte_arrayT_wif_uncompressed_size_1u_t,
  &_swigt__p_chain__points_value,
  &_swigt__p_chain__script,
  &_swigt__p_char,
  &_swigt__p_config__checkpoint,
  &_swigt__p_data_chunk,
  &_swigt__p_data_slice,
  &_swigt__p_ec_compressed,
  &_swigt__p_ec_public,
  &_swigt__p_ec_secret,
  &_swigt__p_ec_uncompressed,
  &_swigt__p_encrypted_private,
  &_swigt__p_encrypted_public,
  &_swigt__p_encrypted_token,
  &_swigt__p_hash_digest,
  &_swigt__p_int32_t,
  &_swigt__p_int64_t,
  &_swigt__p_libbitcoin__wallet__bitcoin_uri,
  &_swigt__p_libbitcoin__wallet__ec_private,
  &_swigt__p_libbitcoin__wallet__ec_public,
  &_swigt__p_libbitcoin__wallet__ek_private,
  &_swigt__p_libbitcoin__wallet__ek_public,
  &_swigt__p_libbitcoin__wallet__ek_token,
  &_swigt__p_libbitcoin__wallet__hd_lineage,
  &_swigt__p_libbitcoin__wallet__hd_private,
  &_swigt__p_libbitcoin__wallet__hd_public,
  &_swigt__p_libbitcoin__wallet__payment_address,
  &_swigt__p_libbitcoin__wallet__select_outputs,
  &_swigt__p_libbitcoin__wallet__stealth_address,
  &_swigt__p_libbitcoin__wallet__stealth_receiver,
  &_swigt__p_libbitcoin__wallet__stealth_sender,
  &_swigt__p_libbitcoin__wallet__uri,
  &_swigt__p_libbitcoin__wallet__uri_reader,
  &_swigt__p_libbitcoin__wallet__wrapped_data,
  &_swigt__p_long_hash,
  &_swigt__p_payment_address,
  &_swigt__p_point_list,
  &_swigt__p_ptr,
  &_swigt__p_query_map,
  &_swigt__p_short_hash,
  &_swigt__p_std__arrayT_char_const_p_2048_t,
  &_swigt__p_std__error_code,
  &_swigt__p_std__error_condition,
  &_swigt__p_std__functionT_void_fstd__error_code_const_RF_t,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t,
  &_swigt__p_stealth_address,
  &_swigt__p_string_list,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint64_t,
  &_swigt__p_uint8_t,
};

static swig_cast_info _swigc__p_binary[] = {  {&_swigt__p_binary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__system__error_code[] = {  {&_swigt__p_boost__system__error_code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_1_ec_signature_size_t[] = {  {&_swigt__p_byte_arrayT_1_ec_signature_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_1u_short_hash_size_checksum_size_t[] = {  {&_swigt__p_byte_arrayT_1u_short_hash_size_checksum_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_24_t[] = {  {&_swigt__p_byte_arrayT_24_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_32_t[] = {  {&_swigt__p_byte_arrayT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_37u_t[] = {  {&_swigt__p_byte_arrayT_37u_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_43_t[] = {  {&_swigt__p_byte_arrayT_43_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_4_t[] = {  {&_swigt__p_byte_arrayT_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_53_t[] = {  {&_swigt__p_byte_arrayT_53_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_55_t[] = {  {&_swigt__p_byte_arrayT_55_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_82_t[] = {  {&_swigt__p_byte_arrayT_82_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_8_t[] = {  {&_swigt__p_byte_arrayT_8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte_arrayT_wif_uncompressed_size_1u_t[] = {  {&_swigt__p_byte_arrayT_wif_uncompressed_size_1u_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_chain__points_value[] = {  {&_swigt__p_chain__points_value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_chain__script[] = {  {&_swigt__p_chain__script, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_config__checkpoint[] = {  {&_swigt__p_config__checkpoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_data_chunk[] = {  {&_swigt__p_data_chunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_data_slice[] = {  {&_swigt__p_data_slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ec_compressed[] = {  {&_swigt__p_ec_compressed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ec_public[] = {  {&_swigt__p_ec_public, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ec_secret[] = {  {&_swigt__p_ec_secret, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ec_uncompressed[] = {  {&_swigt__p_ec_uncompressed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_encrypted_private[] = {  {&_swigt__p_encrypted_private, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_encrypted_public[] = {  {&_swigt__p_encrypted_public, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_encrypted_token[] = {  {&_swigt__p_encrypted_token, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hash_digest[] = {  {&_swigt__p_hash_digest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__bitcoin_uri[] = {  {&_swigt__p_libbitcoin__wallet__bitcoin_uri, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__ec_private[] = {  {&_swigt__p_libbitcoin__wallet__ec_private, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__ec_public[] = {  {&_swigt__p_libbitcoin__wallet__ec_public, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__ek_private[] = {  {&_swigt__p_libbitcoin__wallet__ek_private, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__ek_public[] = {  {&_swigt__p_libbitcoin__wallet__ek_public, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__ek_token[] = {  {&_swigt__p_libbitcoin__wallet__ek_token, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__hd_lineage[] = {  {&_swigt__p_libbitcoin__wallet__hd_lineage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__hd_private[] = {  {&_swigt__p_libbitcoin__wallet__hd_private, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__hd_public[] = {  {&_swigt__p_libbitcoin__wallet__hd_public, 0, 0, 0},  {&_swigt__p_libbitcoin__wallet__hd_private, _p_libbitcoin__wallet__hd_privateTo_p_libbitcoin__wallet__hd_public, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__payment_address[] = {  {&_swigt__p_libbitcoin__wallet__payment_address, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__select_outputs[] = {  {&_swigt__p_libbitcoin__wallet__select_outputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__stealth_address[] = {  {&_swigt__p_libbitcoin__wallet__stealth_address, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__stealth_receiver[] = {  {&_swigt__p_libbitcoin__wallet__stealth_receiver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__stealth_sender[] = {  {&_swigt__p_libbitcoin__wallet__stealth_sender, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__uri[] = {  {&_swigt__p_libbitcoin__wallet__uri, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__uri_reader[] = {  {&_swigt__p_libbitcoin__wallet__uri_reader, 0, 0, 0},  {&_swigt__p_libbitcoin__wallet__bitcoin_uri, _p_libbitcoin__wallet__bitcoin_uriTo_p_libbitcoin__wallet__uri_reader, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libbitcoin__wallet__wrapped_data[] = {  {&_swigt__p_libbitcoin__wallet__wrapped_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_hash[] = {  {&_swigt__p_long_hash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_payment_address[] = {  {&_swigt__p_payment_address, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_point_list[] = {  {&_swigt__p_point_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ptr[] = {  {&_swigt__p_ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_query_map[] = {  {&_swigt__p_query_map, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short_hash[] = {  {&_swigt__p_short_hash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_char_const_p_2048_t[] = {  {&_swigt__p_std__arrayT_char_const_p_2048_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__error_code[] = {  {&_swigt__p_std__error_code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__error_condition[] = {  {&_swigt__p_std__error_condition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fstd__error_code_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fstd__error_code_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t[] = {  {&_swigt__p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stealth_address[] = {  {&_swigt__p_stealth_address, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string_list[] = {  {&_swigt__p_string_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_binary,
  _swigc__p_bool,
  _swigc__p_boost__system__error_code,
  _swigc__p_byte_arrayT_1_ec_signature_size_t,
  _swigc__p_byte_arrayT_1u_short_hash_size_checksum_size_t,
  _swigc__p_byte_arrayT_24_t,
  _swigc__p_byte_arrayT_32_t,
  _swigc__p_byte_arrayT_37u_t,
  _swigc__p_byte_arrayT_43_t,
  _swigc__p_byte_arrayT_4_t,
  _swigc__p_byte_arrayT_53_t,
  _swigc__p_byte_arrayT_55_t,
  _swigc__p_byte_arrayT_82_t,
  _swigc__p_byte_arrayT_8_t,
  _swigc__p_byte_arrayT_wif_uncompressed_size_1u_t,
  _swigc__p_chain__points_value,
  _swigc__p_chain__script,
  _swigc__p_char,
  _swigc__p_config__checkpoint,
  _swigc__p_data_chunk,
  _swigc__p_data_slice,
  _swigc__p_ec_compressed,
  _swigc__p_ec_public,
  _swigc__p_ec_secret,
  _swigc__p_ec_uncompressed,
  _swigc__p_encrypted_private,
  _swigc__p_encrypted_public,
  _swigc__p_encrypted_token,
  _swigc__p_hash_digest,
  _swigc__p_int32_t,
  _swigc__p_int64_t,
  _swigc__p_libbitcoin__wallet__bitcoin_uri,
  _swigc__p_libbitcoin__wallet__ec_private,
  _swigc__p_libbitcoin__wallet__ec_public,
  _swigc__p_libbitcoin__wallet__ek_private,
  _swigc__p_libbitcoin__wallet__ek_public,
  _swigc__p_libbitcoin__wallet__ek_token,
  _swigc__p_libbitcoin__wallet__hd_lineage,
  _swigc__p_libbitcoin__wallet__hd_private,
  _swigc__p_libbitcoin__wallet__hd_public,
  _swigc__p_libbitcoin__wallet__payment_address,
  _swigc__p_libbitcoin__wallet__select_outputs,
  _swigc__p_libbitcoin__wallet__stealth_address,
  _swigc__p_libbitcoin__wallet__stealth_receiver,
  _swigc__p_libbitcoin__wallet__stealth_sender,
  _swigc__p_libbitcoin__wallet__uri,
  _swigc__p_libbitcoin__wallet__uri_reader,
  _swigc__p_libbitcoin__wallet__wrapped_data,
  _swigc__p_long_hash,
  _swigc__p_payment_address,
  _swigc__p_point_list,
  _swigc__p_ptr,
  _swigc__p_query_map,
  _swigc__p_short_hash,
  _swigc__p_std__arrayT_char_const_p_2048_t,
  _swigc__p_std__error_code,
  _swigc__p_std__error_condition,
  _swigc__p_std__functionT_void_fstd__error_code_const_RF_t,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_std__arrayT_char_const_p_2048_t_const_p_t,
  _swigc__p_stealth_address,
  _swigc__p_string_list,
  _swigc__p_uint16_t,
  _swigc__p_uint32_t,
  _swigc__p_uint64_t,
  _swigc__p_uint8_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_libbitcoin(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mLibbitcoin = rb_define_module("Libbitcoin");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_singleton_method(mLibbitcoin, "min_int64", VALUEFUNC(_wrap_min_int64_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_int64", VALUEFUNC(_wrap_max_int64_get), 0);
  rb_define_singleton_method(mLibbitcoin, "min_int32", VALUEFUNC(_wrap_min_int32_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_int32", VALUEFUNC(_wrap_max_int32_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_uint64", VALUEFUNC(_wrap_max_uint64_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_uint32", VALUEFUNC(_wrap_max_uint32_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_uint16", VALUEFUNC(_wrap_max_uint16_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_uint8", VALUEFUNC(_wrap_max_uint8_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_size_t", VALUEFUNC(_wrap_max_size_t_get), 0);
  rb_define_singleton_method(mLibbitcoin, "byte_bits", VALUEFUNC(_wrap_byte_bits_get), 0);
  rb_define_singleton_method(mLibbitcoin, "no_previous_output", VALUEFUNC(_wrap_no_previous_output_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_input_sequence", VALUEFUNC(_wrap_max_input_sequence_get), 0);
  rb_define_singleton_method(mLibbitcoin, "sighash_null_value", VALUEFUNC(_wrap_sighash_null_value_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_counted_ops", VALUEFUNC(_wrap_max_counted_ops_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_stack_size", VALUEFUNC(_wrap_max_stack_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_script_size", VALUEFUNC(_wrap_max_script_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_push_data_size", VALUEFUNC(_wrap_max_push_data_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_script_public_keys", VALUEFUNC(_wrap_max_script_public_keys_get), 0);
  rb_define_singleton_method(mLibbitcoin, "multisig_default_sigops", VALUEFUNC(_wrap_multisig_default_sigops_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_number_size", VALUEFUNC(_wrap_max_number_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_check_locktime_verify_number_size", VALUEFUNC(_wrap_max_check_locktime_verify_number_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_check_sequence_verify_number_size", VALUEFUNC(_wrap_max_check_sequence_verify_number_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_null_data_size", VALUEFUNC(_wrap_max_null_data_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "min_coinbase_size", VALUEFUNC(_wrap_min_coinbase_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_coinbase_size", VALUEFUNC(_wrap_max_coinbase_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "coinbase_maturity", VALUEFUNC(_wrap_coinbase_maturity_get), 0);
  rb_define_singleton_method(mLibbitcoin, "median_time_past_interval", VALUEFUNC(_wrap_median_time_past_interval_get), 0);
  rb_define_singleton_method(mLibbitcoin, "locktime_threshold", VALUEFUNC(_wrap_locktime_threshold_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_block_size", VALUEFUNC(_wrap_max_block_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_sigops_factor", VALUEFUNC(_wrap_max_sigops_factor_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_block_sigops", VALUEFUNC(_wrap_max_block_sigops_get), 0);
  rb_define_singleton_method(mLibbitcoin, "relative_locktime_min_version", VALUEFUNC(_wrap_relative_locktime_min_version_get), 0);
  rb_define_singleton_method(mLibbitcoin, "relative_locktime_seconds_shift", VALUEFUNC(_wrap_relative_locktime_seconds_shift_get), 0);
  rb_define_singleton_method(mLibbitcoin, "relative_locktime_mask", VALUEFUNC(_wrap_relative_locktime_mask_get), 0);
  rb_define_singleton_method(mLibbitcoin, "relative_locktime_disabled", VALUEFUNC(_wrap_relative_locktime_disabled_get), 0);
  rb_define_singleton_method(mLibbitcoin, "relative_locktime_time_locked", VALUEFUNC(_wrap_relative_locktime_time_locked_get), 0);
  rb_define_singleton_method(mLibbitcoin, "retargeting_factor", VALUEFUNC(_wrap_retargeting_factor_get), 0);
  rb_define_singleton_method(mLibbitcoin, "easy_spacing_seconds", VALUEFUNC(_wrap_easy_spacing_seconds_get), 0);
  rb_define_singleton_method(mLibbitcoin, "target_spacing_seconds", VALUEFUNC(_wrap_target_spacing_seconds_get), 0);
  rb_define_singleton_method(mLibbitcoin, "target_timespan_seconds", VALUEFUNC(_wrap_target_timespan_seconds_get), 0);
  rb_define_singleton_method(mLibbitcoin, "timestamp_future_seconds", VALUEFUNC(_wrap_timestamp_future_seconds_get), 0);
  rb_define_singleton_method(mLibbitcoin, "retarget_proof_of_work_limit", VALUEFUNC(_wrap_retarget_proof_of_work_limit_get), 0);
  rb_define_singleton_method(mLibbitcoin, "no_retarget_proof_of_work_limit", VALUEFUNC(_wrap_no_retarget_proof_of_work_limit_get), 0);
  rb_define_module_function(mLibbitcoin, "work_limit", VALUEFUNC(_wrap_work_limit), -1);
  rb_define_singleton_method(mLibbitcoin, "min_timespan", VALUEFUNC(_wrap_min_timespan_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_timespan", VALUEFUNC(_wrap_max_timespan_get), 0);
  rb_define_singleton_method(mLibbitcoin, "retargeting_interval", VALUEFUNC(_wrap_retargeting_interval_get), 0);
  rb_define_singleton_method(mLibbitcoin, "first_version", VALUEFUNC(_wrap_first_version_get), 0);
  rb_define_singleton_method(mLibbitcoin, "bip34_version", VALUEFUNC(_wrap_bip34_version_get), 0);
  rb_define_singleton_method(mLibbitcoin, "bip66_version", VALUEFUNC(_wrap_bip66_version_get), 0);
  rb_define_singleton_method(mLibbitcoin, "bip65_version", VALUEFUNC(_wrap_bip65_version_get), 0);
  rb_define_singleton_method(mLibbitcoin, "bip9_version_bit0", VALUEFUNC(_wrap_bip9_version_bit0_get), 0);
  rb_define_singleton_method(mLibbitcoin, "bip9_version_bit1", VALUEFUNC(_wrap_bip9_version_bit1_get), 0);
  rb_define_singleton_method(mLibbitcoin, "bip9_version_base", VALUEFUNC(_wrap_bip9_version_base_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_active", VALUEFUNC(_wrap_mainnet_active_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_enforce", VALUEFUNC(_wrap_mainnet_enforce_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_sample", VALUEFUNC(_wrap_mainnet_sample_get), 0);
  rb_define_singleton_method(mLibbitcoin, "testnet_active", VALUEFUNC(_wrap_testnet_active_get), 0);
  rb_define_singleton_method(mLibbitcoin, "testnet_enforce", VALUEFUNC(_wrap_testnet_enforce_get), 0);
  rb_define_singleton_method(mLibbitcoin, "testnet_sample", VALUEFUNC(_wrap_testnet_sample_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_bip65_freeze", VALUEFUNC(_wrap_mainnet_bip65_freeze_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_bip66_freeze", VALUEFUNC(_wrap_mainnet_bip66_freeze_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_bip34_freeze", VALUEFUNC(_wrap_mainnet_bip34_freeze_get), 0);
  rb_define_singleton_method(mLibbitcoin, "testnet_bip65_freeze", VALUEFUNC(_wrap_testnet_bip65_freeze_get), 0);
  rb_define_singleton_method(mLibbitcoin, "testnet_bip66_freeze", VALUEFUNC(_wrap_testnet_bip66_freeze_get), 0);
  rb_define_singleton_method(mLibbitcoin, "testnet_bip34_freeze", VALUEFUNC(_wrap_testnet_bip34_freeze_get), 0);
  rb_define_singleton_method(mLibbitcoin, "regtest_bip65_freeze", VALUEFUNC(_wrap_regtest_bip65_freeze_get), 0);
  rb_define_singleton_method(mLibbitcoin, "regtest_bip66_freeze", VALUEFUNC(_wrap_regtest_bip66_freeze_get), 0);
  rb_define_singleton_method(mLibbitcoin, "regtest_bip34_freeze", VALUEFUNC(_wrap_regtest_bip34_freeze_get), 0);
  rb_define_singleton_method(mLibbitcoin, "bip16_activation_time", VALUEFUNC(_wrap_bip16_activation_time_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_bip16_exception_checkpoint", VALUEFUNC(_wrap_mainnet_bip16_exception_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_bip30_exception_checkpoint1", VALUEFUNC(_wrap_mainnet_bip30_exception_checkpoint1_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_bip30_exception_checkpoint2", VALUEFUNC(_wrap_mainnet_bip30_exception_checkpoint2_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_bip34_active_checkpoint", VALUEFUNC(_wrap_mainnet_bip34_active_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "testnet_bip34_active_checkpoint", VALUEFUNC(_wrap_testnet_bip34_active_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "regtest_bip34_active_checkpoint", VALUEFUNC(_wrap_regtest_bip34_active_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_bip9_bit0_active_checkpoint", VALUEFUNC(_wrap_mainnet_bip9_bit0_active_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "testnet_bip9_bit0_active_checkpoint", VALUEFUNC(_wrap_testnet_bip9_bit0_active_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "regtest_bip9_bit0_active_checkpoint", VALUEFUNC(_wrap_regtest_bip9_bit0_active_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mainnet_bip9_bit1_active_checkpoint", VALUEFUNC(_wrap_mainnet_bip9_bit1_active_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "testnet_bip9_bit1_active_checkpoint", VALUEFUNC(_wrap_testnet_bip9_bit1_active_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "regtest_bip9_bit1_active_checkpoint", VALUEFUNC(_wrap_regtest_bip9_bit1_active_checkpoint_get), 0);
  rb_define_singleton_method(mLibbitcoin, "command_size", VALUEFUNC(_wrap_command_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_address", VALUEFUNC(_wrap_max_address_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_filter_add", VALUEFUNC(_wrap_max_filter_add_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_filter_functions", VALUEFUNC(_wrap_max_filter_functions_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_filter_load", VALUEFUNC(_wrap_max_filter_load_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_get_blocks", VALUEFUNC(_wrap_max_get_blocks_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_get_headers", VALUEFUNC(_wrap_max_get_headers_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_get_data", VALUEFUNC(_wrap_max_get_data_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_inventory", VALUEFUNC(_wrap_max_inventory_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_locator", VALUEFUNC(_wrap_max_locator_get), 0);
  rb_define_singleton_method(mLibbitcoin, "varint_two_bytes", VALUEFUNC(_wrap_varint_two_bytes_get), 0);
  rb_define_singleton_method(mLibbitcoin, "varint_four_bytes", VALUEFUNC(_wrap_varint_four_bytes_get), 0);
  rb_define_singleton_method(mLibbitcoin, "varint_eight_bytes", VALUEFUNC(_wrap_varint_eight_bytes_get), 0);
  rb_define_singleton_method(mLibbitcoin, "string_terminator", VALUEFUNC(_wrap_string_terminator_get), 0);
  rb_define_singleton_method(mLibbitcoin, "witness_marker", VALUEFUNC(_wrap_witness_marker_get), 0);
  rb_define_singleton_method(mLibbitcoin, "witness_flag", VALUEFUNC(_wrap_witness_flag_get), 0);
  rb_define_singleton_method(mLibbitcoin, "witness_head", VALUEFUNC(_wrap_witness_head_get), 0);
  rb_define_singleton_method(mLibbitcoin, "fast_sigops_factor", VALUEFUNC(_wrap_fast_sigops_factor_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_fast_sigops", VALUEFUNC(_wrap_max_fast_sigops_get), 0);
  rb_define_singleton_method(mLibbitcoin, "light_weight_factor", VALUEFUNC(_wrap_light_weight_factor_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_block_weight", VALUEFUNC(_wrap_max_block_weight_get), 0);
  rb_define_singleton_method(mLibbitcoin, "base_size_contribution", VALUEFUNC(_wrap_base_size_contribution_get), 0);
  rb_define_singleton_method(mLibbitcoin, "total_size_contribution", VALUEFUNC(_wrap_total_size_contribution_get), 0);
  rb_define_singleton_method(mLibbitcoin, "min_witness_program", VALUEFUNC(_wrap_min_witness_program_get), 0);
  rb_define_singleton_method(mLibbitcoin, "max_witness_program", VALUEFUNC(_wrap_max_witness_program_get), 0);
  rb_define_module_function(mLibbitcoin, "max_money_recursive", VALUEFUNC(_wrap_max_money_recursive), -1);
  rb_define_singleton_method(mLibbitcoin, "satoshi_per_bitcoin", VALUEFUNC(_wrap_satoshi_per_bitcoin_get), 0);
  rb_define_module_function(mLibbitcoin, "bitcoin_to_satoshi", VALUEFUNC(_wrap_bitcoin_to_satoshi), -1);
  rb_define_singleton_method(mLibbitcoin, "initial_block_subsidy_bitcoin", VALUEFUNC(_wrap_initial_block_subsidy_bitcoin_get), 0);
  rb_define_module_function(mLibbitcoin, "initial_block_subsidy_satoshi", VALUEFUNC(_wrap_initial_block_subsidy_satoshi), -1);
  rb_define_singleton_method(mLibbitcoin, "recursive_money", VALUEFUNC(_wrap_recursive_money_get), 0);
  rb_define_singleton_method(mLibbitcoin, "retarget_subsidy_interval", VALUEFUNC(_wrap_retarget_subsidy_interval_get), 0);
  rb_define_singleton_method(mLibbitcoin, "no_retarget_subsidy_interval", VALUEFUNC(_wrap_no_retarget_subsidy_interval_get), 0);
  rb_define_module_function(mLibbitcoin, "subsidy_interval", VALUEFUNC(_wrap_subsidy_interval), -1);
  rb_define_module_function(mLibbitcoin, "max_money", VALUEFUNC(_wrap_max_money), -1);
  rb_define_const(mLibbitcoin, "Failure", SWIG_From_int(static_cast< int >(libbitcoin::failure)));
  rb_define_const(mLibbitcoin, "Okay", SWIG_From_int(static_cast< int >(libbitcoin::okay)));
  rb_define_const(mLibbitcoin, "Invalid", SWIG_From_int(static_cast< int >(libbitcoin::invalid)));
  rb_define_const(mLibbitcoin, "Success", SWIG_From_int(static_cast< int >(libbitcoin::error::success)));
  rb_define_const(mLibbitcoin, "Deprecated", SWIG_From_int(static_cast< int >(libbitcoin::error::deprecated)));
  rb_define_const(mLibbitcoin, "Unknown", SWIG_From_int(static_cast< int >(libbitcoin::error::unknown)));
  rb_define_const(mLibbitcoin, "Not_found", SWIG_From_int(static_cast< int >(libbitcoin::error::not_found)));
  rb_define_const(mLibbitcoin, "File_system", SWIG_From_int(static_cast< int >(libbitcoin::error::file_system)));
  rb_define_const(mLibbitcoin, "Non_standard", SWIG_From_int(static_cast< int >(libbitcoin::error::non_standard)));
  rb_define_const(mLibbitcoin, "Not_implemented", SWIG_From_int(static_cast< int >(libbitcoin::error::not_implemented)));
  rb_define_const(mLibbitcoin, "Oversubscribed", SWIG_From_int(static_cast< int >(libbitcoin::error::oversubscribed)));
  rb_define_const(mLibbitcoin, "Service_stopped", SWIG_From_int(static_cast< int >(libbitcoin::error::service_stopped)));
  rb_define_const(mLibbitcoin, "Operation_failed", SWIG_From_int(static_cast< int >(libbitcoin::error::operation_failed)));
  rb_define_const(mLibbitcoin, "Resolve_failed", SWIG_From_int(static_cast< int >(libbitcoin::error::resolve_failed)));
  rb_define_const(mLibbitcoin, "Network_unreachable", SWIG_From_int(static_cast< int >(libbitcoin::error::network_unreachable)));
  rb_define_const(mLibbitcoin, "Address_in_use", SWIG_From_int(static_cast< int >(libbitcoin::error::address_in_use)));
  rb_define_const(mLibbitcoin, "Listen_failed", SWIG_From_int(static_cast< int >(libbitcoin::error::listen_failed)));
  rb_define_const(mLibbitcoin, "Accept_failed", SWIG_From_int(static_cast< int >(libbitcoin::error::accept_failed)));
  rb_define_const(mLibbitcoin, "Bad_stream", SWIG_From_int(static_cast< int >(libbitcoin::error::bad_stream)));
  rb_define_const(mLibbitcoin, "Channel_timeout", SWIG_From_int(static_cast< int >(libbitcoin::error::channel_timeout)));
  rb_define_const(mLibbitcoin, "Address_blocked", SWIG_From_int(static_cast< int >(libbitcoin::error::address_blocked)));
  rb_define_const(mLibbitcoin, "Channel_stopped", SWIG_From_int(static_cast< int >(libbitcoin::error::channel_stopped)));
  rb_define_const(mLibbitcoin, "Peer_throttling", SWIG_From_int(static_cast< int >(libbitcoin::error::peer_throttling)));
  rb_define_const(mLibbitcoin, "Store_block_duplicate", SWIG_From_int(static_cast< int >(libbitcoin::error::store_block_duplicate)));
  rb_define_const(mLibbitcoin, "Store_block_invalid_height", SWIG_From_int(static_cast< int >(libbitcoin::error::store_block_invalid_height)));
  rb_define_const(mLibbitcoin, "Store_block_missing_parent", SWIG_From_int(static_cast< int >(libbitcoin::error::store_block_missing_parent)));
  rb_define_const(mLibbitcoin, "Duplicate_block", SWIG_From_int(static_cast< int >(libbitcoin::error::duplicate_block)));
  rb_define_const(mLibbitcoin, "Orphan_block", SWIG_From_int(static_cast< int >(libbitcoin::error::orphan_block)));
  rb_define_const(mLibbitcoin, "Invalid_previous_block", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_previous_block)));
  rb_define_const(mLibbitcoin, "Insufficient_work", SWIG_From_int(static_cast< int >(libbitcoin::error::insufficient_work)));
  rb_define_const(mLibbitcoin, "Orphan_transaction", SWIG_From_int(static_cast< int >(libbitcoin::error::orphan_transaction)));
  rb_define_const(mLibbitcoin, "Insufficient_fee", SWIG_From_int(static_cast< int >(libbitcoin::error::insufficient_fee)));
  rb_define_const(mLibbitcoin, "Dusty_transaction", SWIG_From_int(static_cast< int >(libbitcoin::error::dusty_transaction)));
  rb_define_const(mLibbitcoin, "Stale_chain", SWIG_From_int(static_cast< int >(libbitcoin::error::stale_chain)));
  rb_define_const(mLibbitcoin, "Invalid_proof_of_work", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_proof_of_work)));
  rb_define_const(mLibbitcoin, "Futuristic_timestamp", SWIG_From_int(static_cast< int >(libbitcoin::error::futuristic_timestamp)));
  rb_define_const(mLibbitcoin, "Checkpoints_failed", SWIG_From_int(static_cast< int >(libbitcoin::error::checkpoints_failed)));
  rb_define_const(mLibbitcoin, "Old_version_block", SWIG_From_int(static_cast< int >(libbitcoin::error::old_version_block)));
  rb_define_const(mLibbitcoin, "Incorrect_proof_of_work", SWIG_From_int(static_cast< int >(libbitcoin::error::incorrect_proof_of_work)));
  rb_define_const(mLibbitcoin, "Timestamp_too_early", SWIG_From_int(static_cast< int >(libbitcoin::error::timestamp_too_early)));
  rb_define_const(mLibbitcoin, "Block_size_limit", SWIG_From_int(static_cast< int >(libbitcoin::error::block_size_limit)));
  rb_define_const(mLibbitcoin, "Empty_block", SWIG_From_int(static_cast< int >(libbitcoin::error::empty_block)));
  rb_define_const(mLibbitcoin, "First_not_coinbase", SWIG_From_int(static_cast< int >(libbitcoin::error::first_not_coinbase)));
  rb_define_const(mLibbitcoin, "Extra_coinbases", SWIG_From_int(static_cast< int >(libbitcoin::error::extra_coinbases)));
  rb_define_const(mLibbitcoin, "Internal_duplicate", SWIG_From_int(static_cast< int >(libbitcoin::error::internal_duplicate)));
  rb_define_const(mLibbitcoin, "Block_internal_double_spend", SWIG_From_int(static_cast< int >(libbitcoin::error::block_internal_double_spend)));
  rb_define_const(mLibbitcoin, "Forward_reference", SWIG_From_int(static_cast< int >(libbitcoin::error::forward_reference)));
  rb_define_const(mLibbitcoin, "Merkle_mismatch", SWIG_From_int(static_cast< int >(libbitcoin::error::merkle_mismatch)));
  rb_define_const(mLibbitcoin, "Block_legacy_sigop_limit", SWIG_From_int(static_cast< int >(libbitcoin::error::block_legacy_sigop_limit)));
  rb_define_const(mLibbitcoin, "Block_non_final", SWIG_From_int(static_cast< int >(libbitcoin::error::block_non_final)));
  rb_define_const(mLibbitcoin, "Coinbase_height_mismatch", SWIG_From_int(static_cast< int >(libbitcoin::error::coinbase_height_mismatch)));
  rb_define_const(mLibbitcoin, "Coinbase_value_limit", SWIG_From_int(static_cast< int >(libbitcoin::error::coinbase_value_limit)));
  rb_define_const(mLibbitcoin, "Block_embedded_sigop_limit", SWIG_From_int(static_cast< int >(libbitcoin::error::block_embedded_sigop_limit)));
  rb_define_const(mLibbitcoin, "Invalid_witness_commitment", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_witness_commitment)));
  rb_define_const(mLibbitcoin, "Block_weight_limit", SWIG_From_int(static_cast< int >(libbitcoin::error::block_weight_limit)));
  rb_define_const(mLibbitcoin, "Empty_transaction", SWIG_From_int(static_cast< int >(libbitcoin::error::empty_transaction)));
  rb_define_const(mLibbitcoin, "Previous_output_null", SWIG_From_int(static_cast< int >(libbitcoin::error::previous_output_null)));
  rb_define_const(mLibbitcoin, "Spend_overflow", SWIG_From_int(static_cast< int >(libbitcoin::error::spend_overflow)));
  rb_define_const(mLibbitcoin, "Invalid_coinbase_script_size", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_coinbase_script_size)));
  rb_define_const(mLibbitcoin, "Coinbase_transaction", SWIG_From_int(static_cast< int >(libbitcoin::error::coinbase_transaction)));
  rb_define_const(mLibbitcoin, "Transaction_internal_double_spend", SWIG_From_int(static_cast< int >(libbitcoin::error::transaction_internal_double_spend)));
  rb_define_const(mLibbitcoin, "Transaction_size_limit", SWIG_From_int(static_cast< int >(libbitcoin::error::transaction_size_limit)));
  rb_define_const(mLibbitcoin, "Transaction_legacy_sigop_limit", SWIG_From_int(static_cast< int >(libbitcoin::error::transaction_legacy_sigop_limit)));
  rb_define_const(mLibbitcoin, "Transaction_non_final", SWIG_From_int(static_cast< int >(libbitcoin::error::transaction_non_final)));
  rb_define_const(mLibbitcoin, "Premature_validation", SWIG_From_int(static_cast< int >(libbitcoin::error::premature_validation)));
  rb_define_const(mLibbitcoin, "Unspent_duplicate", SWIG_From_int(static_cast< int >(libbitcoin::error::unspent_duplicate)));
  rb_define_const(mLibbitcoin, "Missing_previous_output", SWIG_From_int(static_cast< int >(libbitcoin::error::missing_previous_output)));
  rb_define_const(mLibbitcoin, "Double_spend", SWIG_From_int(static_cast< int >(libbitcoin::error::double_spend)));
  rb_define_const(mLibbitcoin, "Coinbase_maturity", SWIG_From_int(static_cast< int >(libbitcoin::error::coinbase_maturity)));
  rb_define_const(mLibbitcoin, "Spend_exceeds_value", SWIG_From_int(static_cast< int >(libbitcoin::error::spend_exceeds_value)));
  rb_define_const(mLibbitcoin, "Transaction_embedded_sigop_limit", SWIG_From_int(static_cast< int >(libbitcoin::error::transaction_embedded_sigop_limit)));
  rb_define_const(mLibbitcoin, "Sequence_locked", SWIG_From_int(static_cast< int >(libbitcoin::error::sequence_locked)));
  rb_define_const(mLibbitcoin, "Transaction_weight_limit", SWIG_From_int(static_cast< int >(libbitcoin::error::transaction_weight_limit)));
  rb_define_const(mLibbitcoin, "Invalid_script", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_script)));
  rb_define_const(mLibbitcoin, "Invalid_script_size", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_script_size)));
  rb_define_const(mLibbitcoin, "Invalid_push_data_size", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_push_data_size)));
  rb_define_const(mLibbitcoin, "Invalid_operation_count", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_operation_count)));
  rb_define_const(mLibbitcoin, "Invalid_stack_size", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_stack_size)));
  rb_define_const(mLibbitcoin, "Invalid_stack_scope", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_stack_scope)));
  rb_define_const(mLibbitcoin, "Invalid_script_embed", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_script_embed)));
  rb_define_const(mLibbitcoin, "Invalid_signature_encoding", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_signature_encoding)));
  rb_define_const(mLibbitcoin, "Invalid_signature_lax_encoding", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_signature_lax_encoding)));
  rb_define_const(mLibbitcoin, "Incorrect_signature", SWIG_From_int(static_cast< int >(libbitcoin::error::incorrect_signature)));
  rb_define_const(mLibbitcoin, "Unexpected_witness", SWIG_From_int(static_cast< int >(libbitcoin::error::unexpected_witness)));
  rb_define_const(mLibbitcoin, "Invalid_witness", SWIG_From_int(static_cast< int >(libbitcoin::error::invalid_witness)));
  rb_define_const(mLibbitcoin, "Dirty_witness", SWIG_From_int(static_cast< int >(libbitcoin::error::dirty_witness)));
  rb_define_const(mLibbitcoin, "Stack_false", SWIG_From_int(static_cast< int >(libbitcoin::error::stack_false)));
  rb_define_const(mLibbitcoin, "Op_disabled", SWIG_From_int(static_cast< int >(libbitcoin::error::op_disabled)));
  rb_define_const(mLibbitcoin, "Op_reserved", SWIG_From_int(static_cast< int >(libbitcoin::error::op_reserved)));
  rb_define_const(mLibbitcoin, "Op_push_size", SWIG_From_int(static_cast< int >(libbitcoin::error::op_push_size)));
  rb_define_const(mLibbitcoin, "Op_push_data", SWIG_From_int(static_cast< int >(libbitcoin::error::op_push_data)));
  rb_define_const(mLibbitcoin, "Op_if", SWIG_From_int(static_cast< int >(libbitcoin::error::op_if)));
  rb_define_const(mLibbitcoin, "Op_notif", SWIG_From_int(static_cast< int >(libbitcoin::error::op_notif)));
  rb_define_const(mLibbitcoin, "Op_else", SWIG_From_int(static_cast< int >(libbitcoin::error::op_else)));
  rb_define_const(mLibbitcoin, "Op_endif", SWIG_From_int(static_cast< int >(libbitcoin::error::op_endif)));
  rb_define_const(mLibbitcoin, "Op_verify1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_verify1)));
  rb_define_const(mLibbitcoin, "Op_verify2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_verify2)));
  rb_define_const(mLibbitcoin, "Op_return", SWIG_From_int(static_cast< int >(libbitcoin::error::op_return)));
  rb_define_const(mLibbitcoin, "Op_to_alt_stack", SWIG_From_int(static_cast< int >(libbitcoin::error::op_to_alt_stack)));
  rb_define_const(mLibbitcoin, "Op_from_alt_stack", SWIG_From_int(static_cast< int >(libbitcoin::error::op_from_alt_stack)));
  rb_define_const(mLibbitcoin, "Op_drop2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_drop2)));
  rb_define_const(mLibbitcoin, "Op_dup2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_dup2)));
  rb_define_const(mLibbitcoin, "Op_dup3", SWIG_From_int(static_cast< int >(libbitcoin::error::op_dup3)));
  rb_define_const(mLibbitcoin, "Op_over2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_over2)));
  rb_define_const(mLibbitcoin, "Op_rot2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_rot2)));
  rb_define_const(mLibbitcoin, "Op_swap2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_swap2)));
  rb_define_const(mLibbitcoin, "Op_if_dup", SWIG_From_int(static_cast< int >(libbitcoin::error::op_if_dup)));
  rb_define_const(mLibbitcoin, "Op_drop", SWIG_From_int(static_cast< int >(libbitcoin::error::op_drop)));
  rb_define_const(mLibbitcoin, "Op_dup", SWIG_From_int(static_cast< int >(libbitcoin::error::op_dup)));
  rb_define_const(mLibbitcoin, "Op_nip", SWIG_From_int(static_cast< int >(libbitcoin::error::op_nip)));
  rb_define_const(mLibbitcoin, "Op_over", SWIG_From_int(static_cast< int >(libbitcoin::error::op_over)));
  rb_define_const(mLibbitcoin, "Op_pick", SWIG_From_int(static_cast< int >(libbitcoin::error::op_pick)));
  rb_define_const(mLibbitcoin, "Op_roll", SWIG_From_int(static_cast< int >(libbitcoin::error::op_roll)));
  rb_define_const(mLibbitcoin, "Op_rot", SWIG_From_int(static_cast< int >(libbitcoin::error::op_rot)));
  rb_define_const(mLibbitcoin, "Op_swap", SWIG_From_int(static_cast< int >(libbitcoin::error::op_swap)));
  rb_define_const(mLibbitcoin, "Op_tuck", SWIG_From_int(static_cast< int >(libbitcoin::error::op_tuck)));
  rb_define_const(mLibbitcoin, "Op_size", SWIG_From_int(static_cast< int >(libbitcoin::error::op_size)));
  rb_define_const(mLibbitcoin, "Op_equal", SWIG_From_int(static_cast< int >(libbitcoin::error::op_equal)));
  rb_define_const(mLibbitcoin, "Op_equal_verify1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_equal_verify1)));
  rb_define_const(mLibbitcoin, "Op_equal_verify2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_equal_verify2)));
  rb_define_const(mLibbitcoin, "Op_add1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_add1)));
  rb_define_const(mLibbitcoin, "Op_sub1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_sub1)));
  rb_define_const(mLibbitcoin, "Op_negate", SWIG_From_int(static_cast< int >(libbitcoin::error::op_negate)));
  rb_define_const(mLibbitcoin, "Op_abs", SWIG_From_int(static_cast< int >(libbitcoin::error::op_abs)));
  rb_define_const(mLibbitcoin, "Op_not", SWIG_From_int(static_cast< int >(libbitcoin::error::op_not)));
  rb_define_const(mLibbitcoin, "Op_nonzero", SWIG_From_int(static_cast< int >(libbitcoin::error::op_nonzero)));
  rb_define_const(mLibbitcoin, "Op_add", SWIG_From_int(static_cast< int >(libbitcoin::error::op_add)));
  rb_define_const(mLibbitcoin, "Op_sub", SWIG_From_int(static_cast< int >(libbitcoin::error::op_sub)));
  rb_define_const(mLibbitcoin, "Op_bool_and", SWIG_From_int(static_cast< int >(libbitcoin::error::op_bool_and)));
  rb_define_const(mLibbitcoin, "Op_bool_or", SWIG_From_int(static_cast< int >(libbitcoin::error::op_bool_or)));
  rb_define_const(mLibbitcoin, "Op_num_equal", SWIG_From_int(static_cast< int >(libbitcoin::error::op_num_equal)));
  rb_define_const(mLibbitcoin, "Op_num_equal_verify1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_num_equal_verify1)));
  rb_define_const(mLibbitcoin, "Op_num_equal_verify2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_num_equal_verify2)));
  rb_define_const(mLibbitcoin, "Op_num_not_equal", SWIG_From_int(static_cast< int >(libbitcoin::error::op_num_not_equal)));
  rb_define_const(mLibbitcoin, "Op_less_than", SWIG_From_int(static_cast< int >(libbitcoin::error::op_less_than)));
  rb_define_const(mLibbitcoin, "Op_greater_than", SWIG_From_int(static_cast< int >(libbitcoin::error::op_greater_than)));
  rb_define_const(mLibbitcoin, "Op_less_than_or_equal", SWIG_From_int(static_cast< int >(libbitcoin::error::op_less_than_or_equal)));
  rb_define_const(mLibbitcoin, "Op_greater_than_or_equal", SWIG_From_int(static_cast< int >(libbitcoin::error::op_greater_than_or_equal)));
  rb_define_const(mLibbitcoin, "Op_min", SWIG_From_int(static_cast< int >(libbitcoin::error::op_min)));
  rb_define_const(mLibbitcoin, "Op_max", SWIG_From_int(static_cast< int >(libbitcoin::error::op_max)));
  rb_define_const(mLibbitcoin, "Op_within", SWIG_From_int(static_cast< int >(libbitcoin::error::op_within)));
  rb_define_const(mLibbitcoin, "Op_ripemd160", SWIG_From_int(static_cast< int >(libbitcoin::error::op_ripemd160)));
  rb_define_const(mLibbitcoin, "Op_sha1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_sha1)));
  rb_define_const(mLibbitcoin, "Op_sha256", SWIG_From_int(static_cast< int >(libbitcoin::error::op_sha256)));
  rb_define_const(mLibbitcoin, "Op_hash160", SWIG_From_int(static_cast< int >(libbitcoin::error::op_hash160)));
  rb_define_const(mLibbitcoin, "Op_hash256", SWIG_From_int(static_cast< int >(libbitcoin::error::op_hash256)));
  rb_define_const(mLibbitcoin, "Op_code_seperator", SWIG_From_int(static_cast< int >(libbitcoin::error::op_code_seperator)));
  rb_define_const(mLibbitcoin, "Op_check_sig_verify1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_sig_verify1)));
  rb_define_const(mLibbitcoin, "Op_check_sig", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_sig)));
  rb_define_const(mLibbitcoin, "Op_check_multisig_verify1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_multisig_verify1)));
  rb_define_const(mLibbitcoin, "Op_check_multisig_verify2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_multisig_verify2)));
  rb_define_const(mLibbitcoin, "Op_check_multisig_verify3", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_multisig_verify3)));
  rb_define_const(mLibbitcoin, "Op_check_multisig_verify4", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_multisig_verify4)));
  rb_define_const(mLibbitcoin, "Op_check_multisig_verify5", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_multisig_verify5)));
  rb_define_const(mLibbitcoin, "Op_check_multisig_verify6", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_multisig_verify6)));
  rb_define_const(mLibbitcoin, "Op_check_multisig_verify7", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_multisig_verify7)));
  rb_define_const(mLibbitcoin, "Op_check_multisig", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_multisig)));
  rb_define_const(mLibbitcoin, "Op_check_locktime_verify1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_locktime_verify1)));
  rb_define_const(mLibbitcoin, "Op_check_locktime_verify2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_locktime_verify2)));
  rb_define_const(mLibbitcoin, "Op_check_locktime_verify3", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_locktime_verify3)));
  rb_define_const(mLibbitcoin, "Op_check_locktime_verify4", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_locktime_verify4)));
  rb_define_const(mLibbitcoin, "Op_check_locktime_verify5", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_locktime_verify5)));
  rb_define_const(mLibbitcoin, "Op_check_locktime_verify6", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_locktime_verify6)));
  rb_define_const(mLibbitcoin, "Op_check_sequence_verify1", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_sequence_verify1)));
  rb_define_const(mLibbitcoin, "Op_check_sequence_verify2", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_sequence_verify2)));
  rb_define_const(mLibbitcoin, "Op_check_sequence_verify3", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_sequence_verify3)));
  rb_define_const(mLibbitcoin, "Op_check_sequence_verify4", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_sequence_verify4)));
  rb_define_const(mLibbitcoin, "Op_check_sequence_verify5", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_sequence_verify5)));
  rb_define_const(mLibbitcoin, "Op_check_sequence_verify6", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_sequence_verify6)));
  rb_define_const(mLibbitcoin, "Op_check_sequence_verify7", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_sequence_verify7)));
  rb_define_const(mLibbitcoin, "Op_check_multisig_verify8", SWIG_From_int(static_cast< int >(libbitcoin::error::op_check_multisig_verify8)));
  rb_define_module_function(mLibbitcoin, "make_error_code", VALUEFUNC(_wrap_make_error_code), -1);
  rb_define_module_function(mLibbitcoin, "make_error_condition", VALUEFUNC(_wrap_make_error_condition), -1);
  rb_define_module_function(mLibbitcoin, "boost_to_error_code", VALUEFUNC(_wrap_boost_to_error_code), -1);
  rb_define_module_function(mLibbitcoin, "posix_to_error_code", VALUEFUNC(_wrap_posix_to_error_code), -1);
  rb_define_const(mLibbitcoin, "LIBBITCOIN_VERSION", SWIG_FromCharPtr("3.4.0"));
  rb_define_const(mLibbitcoin, "LIBBITCOIN_MAJOR_VERSION", SWIG_From_int(static_cast< int >(3)));
  rb_define_const(mLibbitcoin, "LIBBITCOIN_MINOR_VERSION", SWIG_From_int(static_cast< int >(4)));
  rb_define_const(mLibbitcoin, "LIBBITCOIN_PATCH_VERSION", SWIG_From_int(static_cast< int >(0)));
  
  SwigClassUri.klass = rb_define_class_under(mLibbitcoin, "Uri", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__uri, (void *) &SwigClassUri);
  rb_define_alloc_func(SwigClassUri.klass, _wrap_uri_allocate);
  rb_define_method(SwigClassUri.klass, "initialize", VALUEFUNC(_wrap_new_uri), -1);
  rb_define_method(SwigClassUri.klass, "decode", VALUEFUNC(_wrap_uri_decode), -1);
  rb_define_method(SwigClassUri.klass, "encoded", VALUEFUNC(_wrap_uri_encoded), -1);
  rb_define_method(SwigClassUri.klass, "scheme", VALUEFUNC(_wrap_uri_scheme), -1);
  rb_define_method(SwigClassUri.klass, "set_scheme", VALUEFUNC(_wrap_uri_set_scheme), -1);
  rb_define_method(SwigClassUri.klass, "authority", VALUEFUNC(_wrap_uri_authority), -1);
  rb_define_method(SwigClassUri.klass, "has_authority", VALUEFUNC(_wrap_uri_has_authority), -1);
  rb_define_method(SwigClassUri.klass, "set_authority", VALUEFUNC(_wrap_uri_set_authority), -1);
  rb_define_method(SwigClassUri.klass, "remove_authority", VALUEFUNC(_wrap_uri_remove_authority), -1);
  rb_define_method(SwigClassUri.klass, "path", VALUEFUNC(_wrap_uri_path), -1);
  rb_define_method(SwigClassUri.klass, "set_path", VALUEFUNC(_wrap_uri_set_path), -1);
  rb_define_method(SwigClassUri.klass, "query", VALUEFUNC(_wrap_uri_query), -1);
  rb_define_method(SwigClassUri.klass, "has_query", VALUEFUNC(_wrap_uri_has_query), -1);
  rb_define_method(SwigClassUri.klass, "set_query", VALUEFUNC(_wrap_uri_set_query), -1);
  rb_define_method(SwigClassUri.klass, "remove_query", VALUEFUNC(_wrap_uri_remove_query), -1);
  rb_define_method(SwigClassUri.klass, "fragment", VALUEFUNC(_wrap_uri_fragment), -1);
  rb_define_method(SwigClassUri.klass, "has_fragment", VALUEFUNC(_wrap_uri_has_fragment), -1);
  rb_define_method(SwigClassUri.klass, "set_fragment", VALUEFUNC(_wrap_uri_set_fragment), -1);
  rb_define_method(SwigClassUri.klass, "remove_fragment", VALUEFUNC(_wrap_uri_remove_fragment), -1);
  rb_define_method(SwigClassUri.klass, "decode_query", VALUEFUNC(_wrap_uri_decode_query), -1);
  rb_define_method(SwigClassUri.klass, "encode_query", VALUEFUNC(_wrap_uri_encode_query), -1);
  SwigClassUri.mark = 0;
  SwigClassUri.destroy = (void (*)(void *)) free_libbitcoin_wallet_uri;
  SwigClassUri.trackObjects = 0;
  
  SwigClassUri_reader.klass = rb_define_class_under(mLibbitcoin, "Uri_reader", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__uri_reader, (void *) &SwigClassUri_reader);
  rb_undef_alloc_func(SwigClassUri_reader.klass);
  rb_define_method(SwigClassUri_reader.klass, "set_strict", VALUEFUNC(_wrap_uri_reader_set_strict), -1);
  rb_define_method(SwigClassUri_reader.klass, "set_scheme", VALUEFUNC(_wrap_uri_reader_set_scheme), -1);
  rb_define_method(SwigClassUri_reader.klass, "set_authority", VALUEFUNC(_wrap_uri_reader_set_authority), -1);
  rb_define_method(SwigClassUri_reader.klass, "set_path", VALUEFUNC(_wrap_uri_reader_set_path), -1);
  rb_define_method(SwigClassUri_reader.klass, "set_fragment", VALUEFUNC(_wrap_uri_reader_set_fragment), -1);
  rb_define_method(SwigClassUri_reader.klass, "set_parameter", VALUEFUNC(_wrap_uri_reader_set_parameter), -1);
  SwigClassUri_reader.mark = 0;
  SwigClassUri_reader.destroy = (void (*)(void *)) free_libbitcoin_wallet_uri_reader;
  SwigClassUri_reader.trackObjects = 0;
  
  SwigClassBitcoin_uri.klass = rb_define_class_under(mLibbitcoin, "Bitcoin_uri", ((swig_class *) SWIGTYPE_p_libbitcoin__wallet__uri_reader->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__bitcoin_uri, (void *) &SwigClassBitcoin_uri);
  rb_define_alloc_func(SwigClassBitcoin_uri.klass, _wrap_bitcoin_uri_allocate);
  rb_define_method(SwigClassBitcoin_uri.klass, "initialize", VALUEFUNC(_wrap_new_bitcoin_uri), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "<", VALUEFUNC(_wrap_bitcoin_uri___lt__), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "==", VALUEFUNC(_wrap_bitcoin_uri___eq__), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "present?", VALUEFUNC(_wrap_bitcoin_uri_presentq___), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "encoded", VALUEFUNC(_wrap_bitcoin_uri_encoded), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "amount", VALUEFUNC(_wrap_bitcoin_uri_amount), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "label", VALUEFUNC(_wrap_bitcoin_uri_label), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "message", VALUEFUNC(_wrap_bitcoin_uri_message), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "r", VALUEFUNC(_wrap_bitcoin_uri_r), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "address", VALUEFUNC(_wrap_bitcoin_uri_address), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "payment", VALUEFUNC(_wrap_bitcoin_uri_payment), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "stealth", VALUEFUNC(_wrap_bitcoin_uri_stealth), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "parameter", VALUEFUNC(_wrap_bitcoin_uri_parameter), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_amount", VALUEFUNC(_wrap_bitcoin_uri_set_amount), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_label", VALUEFUNC(_wrap_bitcoin_uri_set_label), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_message", VALUEFUNC(_wrap_bitcoin_uri_set_message), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_r", VALUEFUNC(_wrap_bitcoin_uri_set_r), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_address", VALUEFUNC(_wrap_bitcoin_uri_set_address), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_strict", VALUEFUNC(_wrap_bitcoin_uri_set_strict), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_scheme", VALUEFUNC(_wrap_bitcoin_uri_set_scheme), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_authority", VALUEFUNC(_wrap_bitcoin_uri_set_authority), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_path", VALUEFUNC(_wrap_bitcoin_uri_set_path), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_fragment", VALUEFUNC(_wrap_bitcoin_uri_set_fragment), -1);
  rb_define_method(SwigClassBitcoin_uri.klass, "set_parameter", VALUEFUNC(_wrap_bitcoin_uri_set_parameter), -1);
  SwigClassBitcoin_uri.mark = 0;
  SwigClassBitcoin_uri.destroy = (void (*)(void *)) free_libbitcoin_wallet_bitcoin_uri;
  SwigClassBitcoin_uri.trackObjects = 0;
  rb_define_singleton_method(mLibbitcoin, "dictionary_size", VALUEFUNC(_wrap_dictionary_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "en", VALUEFUNC(_wrap_en_get), 0);
  rb_define_singleton_method(mLibbitcoin, "es", VALUEFUNC(_wrap_es_get), 0);
  rb_define_singleton_method(mLibbitcoin, "ja", VALUEFUNC(_wrap_ja_get), 0);
  rb_define_singleton_method(mLibbitcoin, "it", VALUEFUNC(_wrap_it_get), 0);
  rb_define_singleton_method(mLibbitcoin, "fr", VALUEFUNC(_wrap_fr_get), 0);
  rb_define_singleton_method(mLibbitcoin, "cs", VALUEFUNC(_wrap_cs_get), 0);
  rb_define_singleton_method(mLibbitcoin, "ru", VALUEFUNC(_wrap_ru_get), 0);
  rb_define_singleton_method(mLibbitcoin, "uk", VALUEFUNC(_wrap_uk_get), 0);
  rb_define_singleton_method(mLibbitcoin, "zh_Hans", VALUEFUNC(_wrap_zh_Hans_get), 0);
  rb_define_singleton_method(mLibbitcoin, "zh_Hant", VALUEFUNC(_wrap_zh_Hant_get), 0);
  rb_define_singleton_method(mLibbitcoin, "all", VALUEFUNC(_wrap_all_get), 0);
  rb_define_singleton_method(mLibbitcoin, "wif_uncompressed_size", VALUEFUNC(_wrap_wif_uncompressed_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "wif_compressed_size", VALUEFUNC(_wrap_wif_compressed_size_get), 0);
  
  SwigClassEc_private.klass = rb_define_class_under(mLibbitcoin, "Ec_private", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__ec_private, (void *) &SwigClassEc_private);
  rb_define_alloc_func(SwigClassEc_private.klass, _wrap_ec_private_allocate);
  rb_define_method(SwigClassEc_private.klass, "initialize", VALUEFUNC(_wrap_new_ec_private), -1);
  rb_define_singleton_method(SwigClassEc_private.klass, "compressed_sentinel", VALUEFUNC(_wrap_ec_private_compressed_sentinel_get), 0);
  rb_define_singleton_method(SwigClassEc_private.klass, "mainnet_wif", VALUEFUNC(_wrap_ec_private_mainnet_wif_get), 0);
  rb_define_singleton_method(SwigClassEc_private.klass, "mainnet_p2kh", VALUEFUNC(_wrap_ec_private_mainnet_p2kh_get), 0);
  rb_define_singleton_method(SwigClassEc_private.klass, "mainnet", VALUEFUNC(_wrap_ec_private_mainnet_get), 0);
  rb_define_singleton_method(SwigClassEc_private.klass, "testnet_wif", VALUEFUNC(_wrap_ec_private_testnet_wif_get), 0);
  rb_define_singleton_method(SwigClassEc_private.klass, "testnet_p2kh", VALUEFUNC(_wrap_ec_private_testnet_p2kh_get), 0);
  rb_define_singleton_method(SwigClassEc_private.klass, "testnet", VALUEFUNC(_wrap_ec_private_testnet_get), 0);
  rb_define_singleton_method(SwigClassEc_private.klass, "to_address_prefix", VALUEFUNC(_wrap_ec_private_to_address_prefix), -1);
  rb_define_singleton_method(SwigClassEc_private.klass, "to_wif_prefix", VALUEFUNC(_wrap_ec_private_to_wif_prefix), -1);
  rb_define_singleton_method(SwigClassEc_private.klass, "to_version", VALUEFUNC(_wrap_ec_private_to_version), -1);
  rb_define_method(SwigClassEc_private.klass, "<", VALUEFUNC(_wrap_ec_private___lt__), -1);
  rb_define_method(SwigClassEc_private.klass, "==", VALUEFUNC(_wrap_ec_private___eq__), -1);
  rb_define_method(SwigClassEc_private.klass, "present?", VALUEFUNC(_wrap_ec_private_presentq___), -1);
  rb_define_method(SwigClassEc_private.klass, "ec_secret", VALUEFUNC(_wrap_ec_private_ec_secret), -1);
  rb_define_method(SwigClassEc_private.klass, "encoded", VALUEFUNC(_wrap_ec_private_encoded), -1);
  rb_define_method(SwigClassEc_private.klass, "secret", VALUEFUNC(_wrap_ec_private_secret), -1);
  rb_define_method(SwigClassEc_private.klass, "version", VALUEFUNC(_wrap_ec_private_version), -1);
  rb_define_method(SwigClassEc_private.klass, "payment_version", VALUEFUNC(_wrap_ec_private_payment_version), -1);
  rb_define_method(SwigClassEc_private.klass, "wif_version", VALUEFUNC(_wrap_ec_private_wif_version), -1);
  rb_define_method(SwigClassEc_private.klass, "compressed", VALUEFUNC(_wrap_ec_private_compressed), -1);
  rb_define_method(SwigClassEc_private.klass, "to_public", VALUEFUNC(_wrap_ec_private_to_public), -1);
  rb_define_method(SwigClassEc_private.klass, "to_payment_address", VALUEFUNC(_wrap_ec_private_to_payment_address), -1);
  SwigClassEc_private.mark = 0;
  SwigClassEc_private.destroy = (void (*)(void *)) free_libbitcoin_wallet_ec_private;
  SwigClassEc_private.trackObjects = 0;
  
  SwigClassEc_public.klass = rb_define_class_under(mLibbitcoin, "Ec_public", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__ec_public, (void *) &SwigClassEc_public);
  rb_define_alloc_func(SwigClassEc_public.klass, _wrap_ec_public_allocate);
  rb_define_method(SwigClassEc_public.klass, "initialize", VALUEFUNC(_wrap_new_ec_public), -1);
  rb_define_singleton_method(SwigClassEc_public.klass, "compressed_even", VALUEFUNC(_wrap_ec_public_compressed_even_get), 0);
  rb_define_singleton_method(SwigClassEc_public.klass, "compressed_odd", VALUEFUNC(_wrap_ec_public_compressed_odd_get), 0);
  rb_define_singleton_method(SwigClassEc_public.klass, "uncompressed", VALUEFUNC(_wrap_ec_public_uncompressed_get), 0);
  rb_define_singleton_method(SwigClassEc_public.klass, "mainnet_p2kh", VALUEFUNC(_wrap_ec_public_mainnet_p2kh_get), 0);
  rb_define_method(SwigClassEc_public.klass, "<", VALUEFUNC(_wrap_ec_public___lt__), -1);
  rb_define_method(SwigClassEc_public.klass, "==", VALUEFUNC(_wrap_ec_public___eq__), -1);
  rb_define_method(SwigClassEc_public.klass, "present?", VALUEFUNC(_wrap_ec_public_presentq___), -1);
  rb_define_method(SwigClassEc_public.klass, "ec_compressed", VALUEFUNC(_wrap_ec_public_ec_compressed), -1);
  rb_define_method(SwigClassEc_public.klass, "encoded", VALUEFUNC(_wrap_ec_public_encoded), -1);
  rb_define_method(SwigClassEc_public.klass, "point", VALUEFUNC(_wrap_ec_public_point), -1);
  rb_define_method(SwigClassEc_public.klass, "compressed", VALUEFUNC(_wrap_ec_public_compressed), -1);
  rb_define_method(SwigClassEc_public.klass, "to_data", VALUEFUNC(_wrap_ec_public_to_data), -1);
  rb_define_method(SwigClassEc_public.klass, "to_uncompressed", VALUEFUNC(_wrap_ec_public_to_uncompressed), -1);
  rb_define_method(SwigClassEc_public.klass, "to_payment_address", VALUEFUNC(_wrap_ec_public_to_payment_address), -1);
  SwigClassEc_public.mark = 0;
  SwigClassEc_public.destroy = (void (*)(void *)) free_libbitcoin_wallet_ec_public;
  SwigClassEc_public.trackObjects = 0;
  
  SwigClassEk_private.klass = rb_define_class_under(mLibbitcoin, "Ek_private", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__ek_private, (void *) &SwigClassEk_private);
  rb_define_alloc_func(SwigClassEk_private.klass, _wrap_ek_private_allocate);
  rb_define_method(SwigClassEk_private.klass, "initialize", VALUEFUNC(_wrap_new_ek_private), -1);
  rb_define_method(SwigClassEk_private.klass, "<", VALUEFUNC(_wrap_ek_private___lt__), -1);
  rb_define_method(SwigClassEk_private.klass, "==", VALUEFUNC(_wrap_ek_private___eq__), -1);
  rb_define_method(SwigClassEk_private.klass, "present?", VALUEFUNC(_wrap_ek_private_presentq___), -1);
  rb_define_method(SwigClassEk_private.klass, "encrypted_private", VALUEFUNC(_wrap_ek_private_encrypted_private), -1);
  rb_define_method(SwigClassEk_private.klass, "encoded", VALUEFUNC(_wrap_ek_private_encoded), -1);
  rb_define_method(SwigClassEk_private.klass, "private_key", VALUEFUNC(_wrap_ek_private_private_key), -1);
  SwigClassEk_private.mark = 0;
  SwigClassEk_private.destroy = (void (*)(void *)) free_libbitcoin_wallet_ek_private;
  SwigClassEk_private.trackObjects = 0;
  
  SwigClassEk_public.klass = rb_define_class_under(mLibbitcoin, "Ek_public", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__ek_public, (void *) &SwigClassEk_public);
  rb_define_alloc_func(SwigClassEk_public.klass, _wrap_ek_public_allocate);
  rb_define_method(SwigClassEk_public.klass, "initialize", VALUEFUNC(_wrap_new_ek_public), -1);
  rb_define_method(SwigClassEk_public.klass, "<", VALUEFUNC(_wrap_ek_public___lt__), -1);
  rb_define_method(SwigClassEk_public.klass, "==", VALUEFUNC(_wrap_ek_public___eq__), -1);
  rb_define_method(SwigClassEk_public.klass, "present?", VALUEFUNC(_wrap_ek_public_presentq___), -1);
  rb_define_method(SwigClassEk_public.klass, "encrypted_public", VALUEFUNC(_wrap_ek_public_encrypted_public), -1);
  rb_define_method(SwigClassEk_public.klass, "encoded", VALUEFUNC(_wrap_ek_public_encoded), -1);
  rb_define_method(SwigClassEk_public.klass, "public_key", VALUEFUNC(_wrap_ek_public_public_key), -1);
  SwigClassEk_public.mark = 0;
  SwigClassEk_public.destroy = (void (*)(void *)) free_libbitcoin_wallet_ek_public;
  SwigClassEk_public.trackObjects = 0;
  
  SwigClassEk_token.klass = rb_define_class_under(mLibbitcoin, "Ek_token", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__ek_token, (void *) &SwigClassEk_token);
  rb_define_alloc_func(SwigClassEk_token.klass, _wrap_ek_token_allocate);
  rb_define_method(SwigClassEk_token.klass, "initialize", VALUEFUNC(_wrap_new_ek_token), -1);
  rb_define_method(SwigClassEk_token.klass, "<", VALUEFUNC(_wrap_ek_token___lt__), -1);
  rb_define_method(SwigClassEk_token.klass, "==", VALUEFUNC(_wrap_ek_token___eq__), -1);
  rb_define_method(SwigClassEk_token.klass, "present?", VALUEFUNC(_wrap_ek_token_presentq___), -1);
  rb_define_method(SwigClassEk_token.klass, "encrypted_token", VALUEFUNC(_wrap_ek_token_encrypted_token), -1);
  rb_define_method(SwigClassEk_token.klass, "encoded", VALUEFUNC(_wrap_ek_token_encoded), -1);
  rb_define_method(SwigClassEk_token.klass, "token", VALUEFUNC(_wrap_ek_token_token), -1);
  SwigClassEk_token.mark = 0;
  SwigClassEk_token.destroy = (void (*)(void *)) free_libbitcoin_wallet_ek_token;
  SwigClassEk_token.trackObjects = 0;
  rb_define_singleton_method(mLibbitcoin, "ek_max_lot", VALUEFUNC(_wrap_ek_max_lot_get), 0);
  rb_define_singleton_method(mLibbitcoin, "ek_max_sequence", VALUEFUNC(_wrap_ek_max_sequence_get), 0);
  rb_define_singleton_method(mLibbitcoin, "ek_salt_size", VALUEFUNC(_wrap_ek_salt_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "ek_entropy_size", VALUEFUNC(_wrap_ek_entropy_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "ek_seed_size", VALUEFUNC(_wrap_ek_seed_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "encrypted_token_encoded_size", VALUEFUNC(_wrap_encrypted_token_encoded_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "encrypted_token_decoded_size", VALUEFUNC(_wrap_encrypted_token_decoded_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "ek_private_encoded_size", VALUEFUNC(_wrap_ek_private_encoded_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "ek_private_decoded_size", VALUEFUNC(_wrap_ek_private_decoded_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "encrypted_public_encoded_size", VALUEFUNC(_wrap_encrypted_public_encoded_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "encrypted_public_decoded_size", VALUEFUNC(_wrap_encrypted_public_decoded_size_get), 0);
  rb_define_const(mLibbitcoin, "Lot_sequence_key", SWIG_From_int(static_cast< int >(libbitcoin::wallet::lot_sequence_key)));
  rb_define_const(mLibbitcoin, "Ec_compressed_key", SWIG_From_int(static_cast< int >(libbitcoin::wallet::ec_compressed_key)));
  rb_define_const(mLibbitcoin, "Ec_non_multiplied_low", SWIG_From_int(static_cast< int >(libbitcoin::wallet::ec_non_multiplied_low)));
  rb_define_const(mLibbitcoin, "Ec_non_multiplied_high", SWIG_From_int(static_cast< int >(libbitcoin::wallet::ec_non_multiplied_high)));
  rb_define_const(mLibbitcoin, "Ec_non_multiplied", SWIG_From_int(static_cast< int >(libbitcoin::wallet::ec_non_multiplied)));
  rb_define_module_function(mLibbitcoin, "create_key_pair", VALUEFUNC(_wrap_create_key_pair), -1);
  rb_define_singleton_method(mLibbitcoin, "hd_first_hardened_key", VALUEFUNC(_wrap_hd_first_hardened_key_get), 0);
  rb_define_singleton_method(mLibbitcoin, "hd_chain_code_size", VALUEFUNC(_wrap_hd_chain_code_size_get), 0);
  rb_define_singleton_method(mLibbitcoin, "hd_key_size", VALUEFUNC(_wrap_hd_key_size_get), 0);
  
  SwigClassHd_lineage.klass = rb_define_class_under(mLibbitcoin, "Hd_lineage", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__hd_lineage, (void *) &SwigClassHd_lineage);
  rb_define_alloc_func(SwigClassHd_lineage.klass, _wrap_hd_lineage_allocate);
  rb_define_method(SwigClassHd_lineage.klass, "initialize", VALUEFUNC(_wrap_new_hd_lineage), -1);
  rb_define_method(SwigClassHd_lineage.klass, "prefixes=", VALUEFUNC(_wrap_hd_lineage_prefixes_set), -1);
  rb_define_method(SwigClassHd_lineage.klass, "prefixes", VALUEFUNC(_wrap_hd_lineage_prefixes_get), -1);
  rb_define_method(SwigClassHd_lineage.klass, "depth=", VALUEFUNC(_wrap_hd_lineage_depth_set), -1);
  rb_define_method(SwigClassHd_lineage.klass, "depth", VALUEFUNC(_wrap_hd_lineage_depth_get), -1);
  rb_define_method(SwigClassHd_lineage.klass, "parent_fingerprint=", VALUEFUNC(_wrap_hd_lineage_parent_fingerprint_set), -1);
  rb_define_method(SwigClassHd_lineage.klass, "parent_fingerprint", VALUEFUNC(_wrap_hd_lineage_parent_fingerprint_get), -1);
  rb_define_method(SwigClassHd_lineage.klass, "child_number=", VALUEFUNC(_wrap_hd_lineage_child_number_set), -1);
  rb_define_method(SwigClassHd_lineage.klass, "child_number", VALUEFUNC(_wrap_hd_lineage_child_number_get), -1);
  rb_define_method(SwigClassHd_lineage.klass, "==", VALUEFUNC(_wrap_hd_lineage___eq__), -1);
  SwigClassHd_lineage.mark = 0;
  SwigClassHd_lineage.destroy = (void (*)(void *)) free_libbitcoin_wallet_hd_lineage;
  SwigClassHd_lineage.trackObjects = 0;
  
  SwigClassHd_public.klass = rb_define_class_under(mLibbitcoin, "Hd_public", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__hd_public, (void *) &SwigClassHd_public);
  rb_define_alloc_func(SwigClassHd_public.klass, _wrap_hd_public_allocate);
  rb_define_method(SwigClassHd_public.klass, "initialize", VALUEFUNC(_wrap_new_hd_public), -1);
  rb_define_singleton_method(SwigClassHd_public.klass, "mainnet", VALUEFUNC(_wrap_hd_public_mainnet_get), 0);
  rb_define_singleton_method(SwigClassHd_public.klass, "testnet", VALUEFUNC(_wrap_hd_public_testnet_get), 0);
  rb_define_singleton_method(SwigClassHd_public.klass, "to_prefix", VALUEFUNC(_wrap_hd_public_to_prefix), -1);
  rb_define_method(SwigClassHd_public.klass, "<", VALUEFUNC(_wrap_hd_public___lt__), -1);
  rb_define_method(SwigClassHd_public.klass, "==", VALUEFUNC(_wrap_hd_public___eq__), -1);
  rb_define_method(SwigClassHd_public.klass, "present?", VALUEFUNC(_wrap_hd_public_presentq___), -1);
  rb_define_method(SwigClassHd_public.klass, "ec_compressed", VALUEFUNC(_wrap_hd_public_ec_compressed), -1);
  rb_define_method(SwigClassHd_public.klass, "encoded", VALUEFUNC(_wrap_hd_public_encoded), -1);
  rb_define_method(SwigClassHd_public.klass, "chain_code", VALUEFUNC(_wrap_hd_public_chain_code), -1);
  rb_define_method(SwigClassHd_public.klass, "lineage", VALUEFUNC(_wrap_hd_public_lineage), -1);
  rb_define_method(SwigClassHd_public.klass, "point", VALUEFUNC(_wrap_hd_public_point), -1);
  rb_define_method(SwigClassHd_public.klass, "to_hd_key", VALUEFUNC(_wrap_hd_public_to_hd_key), -1);
  rb_define_method(SwigClassHd_public.klass, "derive_public", VALUEFUNC(_wrap_hd_public_derive_public), -1);
  SwigClassHd_public.mark = 0;
  SwigClassHd_public.destroy = (void (*)(void *)) free_libbitcoin_wallet_hd_public;
  SwigClassHd_public.trackObjects = 0;
  
  SwigClassHd_private.klass = rb_define_class_under(mLibbitcoin, "Hd_private", ((swig_class *) SWIGTYPE_p_libbitcoin__wallet__hd_public->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__hd_private, (void *) &SwigClassHd_private);
  rb_define_alloc_func(SwigClassHd_private.klass, _wrap_hd_private_allocate);
  rb_define_method(SwigClassHd_private.klass, "initialize", VALUEFUNC(_wrap_new_hd_private), -1);
  rb_define_singleton_method(SwigClassHd_private.klass, "mainnet", VALUEFUNC(_wrap_hd_private_mainnet_get), 0);
  rb_define_singleton_method(SwigClassHd_private.klass, "testnet", VALUEFUNC(_wrap_hd_private_testnet_get), 0);
  rb_define_singleton_method(SwigClassHd_private.klass, "to_prefix", VALUEFUNC(_wrap_hd_private_to_prefix), -1);
  rb_define_singleton_method(SwigClassHd_private.klass, "to_prefixes", VALUEFUNC(_wrap_hd_private_to_prefixes), -1);
  rb_define_method(SwigClassHd_private.klass, "<", VALUEFUNC(_wrap_hd_private___lt__), -1);
  rb_define_method(SwigClassHd_private.klass, "==", VALUEFUNC(_wrap_hd_private___eq__), -1);
  rb_define_method(SwigClassHd_private.klass, "ec_secret", VALUEFUNC(_wrap_hd_private_ec_secret), -1);
  rb_define_method(SwigClassHd_private.klass, "encoded", VALUEFUNC(_wrap_hd_private_encoded), -1);
  rb_define_method(SwigClassHd_private.klass, "secret", VALUEFUNC(_wrap_hd_private_secret), -1);
  rb_define_method(SwigClassHd_private.klass, "to_hd_key", VALUEFUNC(_wrap_hd_private_to_hd_key), -1);
  rb_define_method(SwigClassHd_private.klass, "to_public", VALUEFUNC(_wrap_hd_private_to_public), -1);
  rb_define_method(SwigClassHd_private.klass, "derive_private", VALUEFUNC(_wrap_hd_private_derive_private), -1);
  rb_define_method(SwigClassHd_private.klass, "derive_public", VALUEFUNC(_wrap_hd_private_derive_public), -1);
  SwigClassHd_private.mark = 0;
  SwigClassHd_private.destroy = (void (*)(void *)) free_libbitcoin_wallet_hd_private;
  SwigClassHd_private.trackObjects = 0;
  rb_define_singleton_method(mLibbitcoin, "message_signature_size", VALUEFUNC(_wrap_message_signature_size_get), 0);
  rb_define_module_function(mLibbitcoin, "hash_message", VALUEFUNC(_wrap_hash_message), -1);
  rb_define_module_function(mLibbitcoin, "sign_message", VALUEFUNC(_wrap_sign_message), -1);
  rb_define_module_function(mLibbitcoin, "verify_message", VALUEFUNC(_wrap_verify_message), -1);
  rb_define_module_function(mLibbitcoin, "recovery_id_to_magic", VALUEFUNC(_wrap_recovery_id_to_magic), -1);
  rb_define_module_function(mLibbitcoin, "magic_to_recovery_id", VALUEFUNC(_wrap_magic_to_recovery_id), -1);
  rb_define_module_function(mLibbitcoin, "minikey_to_secret", VALUEFUNC(_wrap_minikey_to_secret), -1);
  rb_define_singleton_method(mLibbitcoin, "mnemonic_word_multiple", VALUEFUNC(_wrap_mnemonic_word_multiple_get), 0);
  rb_define_singleton_method(mLibbitcoin, "mnemonic_seed_multiple", VALUEFUNC(_wrap_mnemonic_seed_multiple_get), 0);
  rb_define_module_function(mLibbitcoin, "create_mnemonic", VALUEFUNC(_wrap_create_mnemonic), -1);
  rb_define_module_function(mLibbitcoin, "validate_mnemonic", VALUEFUNC(_wrap_validate_mnemonic), -1);
  rb_define_module_function(mLibbitcoin, "decode_mnemonic", VALUEFUNC(_wrap_decode_mnemonic), -1);
  rb_define_singleton_method(mLibbitcoin, "payment_size", VALUEFUNC(_wrap_payment_size_get), 0);
  
  SwigClassPayment_address.klass = rb_define_class_under(mLibbitcoin, "Payment_address", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__payment_address, (void *) &SwigClassPayment_address);
  rb_define_alloc_func(SwigClassPayment_address.klass, _wrap_payment_address_allocate);
  rb_define_method(SwigClassPayment_address.klass, "initialize", VALUEFUNC(_wrap_new_payment_address), -1);
  rb_define_singleton_method(SwigClassPayment_address.klass, "mainnet_p2kh", VALUEFUNC(_wrap_payment_address_mainnet_p2kh_get), 0);
  rb_define_singleton_method(SwigClassPayment_address.klass, "mainnet_p2sh", VALUEFUNC(_wrap_payment_address_mainnet_p2sh_get), 0);
  rb_define_singleton_method(SwigClassPayment_address.klass, "testnet_p2kh", VALUEFUNC(_wrap_payment_address_testnet_p2kh_get), 0);
  rb_define_singleton_method(SwigClassPayment_address.klass, "testnet_p2sh", VALUEFUNC(_wrap_payment_address_testnet_p2sh_get), 0);
  rb_define_singleton_method(SwigClassPayment_address.klass, "extract", VALUEFUNC(_wrap_payment_address_extract), -1);
  rb_define_singleton_method(SwigClassPayment_address.klass, "extract_input", VALUEFUNC(_wrap_payment_address_extract_input), -1);
  rb_define_singleton_method(SwigClassPayment_address.klass, "extract_output", VALUEFUNC(_wrap_payment_address_extract_output), -1);
  rb_define_method(SwigClassPayment_address.klass, "<", VALUEFUNC(_wrap_payment_address___lt__), -1);
  rb_define_method(SwigClassPayment_address.klass, "==", VALUEFUNC(_wrap_payment_address___eq__), -1);
  rb_define_method(SwigClassPayment_address.klass, "present?", VALUEFUNC(_wrap_payment_address_presentq___), -1);
  rb_define_method(SwigClassPayment_address.klass, "short_hash", VALUEFUNC(_wrap_payment_address_short_hash), -1);
  rb_define_method(SwigClassPayment_address.klass, "encoded", VALUEFUNC(_wrap_payment_address_encoded), -1);
  rb_define_method(SwigClassPayment_address.klass, "version", VALUEFUNC(_wrap_payment_address_version), -1);
  rb_define_method(SwigClassPayment_address.klass, "hash", VALUEFUNC(_wrap_payment_address_hash), -1);
  rb_define_method(SwigClassPayment_address.klass, "to_payment", VALUEFUNC(_wrap_payment_address_to_payment), -1);
  SwigClassPayment_address.mark = 0;
  SwigClassPayment_address.destroy = (void (*)(void *)) free_libbitcoin_wallet_payment_address;
  SwigClassPayment_address.trackObjects = 0;
  
  SwigClassWrapped_data.klass = rb_define_class_under(mLibbitcoin, "Wrapped_data", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__wrapped_data, (void *) &SwigClassWrapped_data);
  rb_define_alloc_func(SwigClassWrapped_data.klass, _wrap_wrapped_data_allocate);
  rb_define_method(SwigClassWrapped_data.klass, "initialize", VALUEFUNC(_wrap_new_wrapped_data), -1);
  rb_define_method(SwigClassWrapped_data.klass, "version=", VALUEFUNC(_wrap_wrapped_data_version_set), -1);
  rb_define_method(SwigClassWrapped_data.klass, "version", VALUEFUNC(_wrap_wrapped_data_version_get), -1);
  rb_define_method(SwigClassWrapped_data.klass, "payload=", VALUEFUNC(_wrap_wrapped_data_payload_set), -1);
  rb_define_method(SwigClassWrapped_data.klass, "payload", VALUEFUNC(_wrap_wrapped_data_payload_get), -1);
  rb_define_method(SwigClassWrapped_data.klass, "checksum=", VALUEFUNC(_wrap_wrapped_data_checksum_set), -1);
  rb_define_method(SwigClassWrapped_data.klass, "checksum", VALUEFUNC(_wrap_wrapped_data_checksum_get), -1);
  SwigClassWrapped_data.mark = 0;
  SwigClassWrapped_data.destroy = (void (*)(void *)) free_libbitcoin_wallet_wrapped_data;
  SwigClassWrapped_data.trackObjects = 0;
  
  SwigClassSelect_outputs.klass = rb_define_class_under(mLibbitcoin, "Select_outputs", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__select_outputs, (void *) &SwigClassSelect_outputs);
  rb_define_alloc_func(SwigClassSelect_outputs.klass, _wrap_select_outputs_allocate);
  rb_define_method(SwigClassSelect_outputs.klass, "initialize", VALUEFUNC(_wrap_new_select_outputs), -1);
  rb_define_const(SwigClassSelect_outputs.klass, "Algorithm_greedy", SWIG_From_int(static_cast< int >(libbitcoin::wallet::select_outputs::algorithm::greedy)));
  rb_define_const(SwigClassSelect_outputs.klass, "Algorithm_individual", SWIG_From_int(static_cast< int >(libbitcoin::wallet::select_outputs::algorithm::individual)));
  rb_define_singleton_method(SwigClassSelect_outputs.klass, "select", VALUEFUNC(_wrap_select_outputs_select), -1);
  SwigClassSelect_outputs.mark = 0;
  SwigClassSelect_outputs.destroy = (void (*)(void *)) free_libbitcoin_wallet_select_outputs;
  SwigClassSelect_outputs.trackObjects = 0;
  
  SwigClassStealth_address.klass = rb_define_class_under(mLibbitcoin, "Stealth_address", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__stealth_address, (void *) &SwigClassStealth_address);
  rb_define_alloc_func(SwigClassStealth_address.klass, _wrap_stealth_address_allocate);
  rb_define_method(SwigClassStealth_address.klass, "initialize", VALUEFUNC(_wrap_new_stealth_address), -1);
  rb_define_singleton_method(SwigClassStealth_address.klass, "mainnet_p2kh", VALUEFUNC(_wrap_stealth_address_mainnet_p2kh_get), 0);
  rb_define_singleton_method(SwigClassStealth_address.klass, "reuse_key_flag", VALUEFUNC(_wrap_stealth_address_reuse_key_flag_get), 0);
  rb_define_singleton_method(SwigClassStealth_address.klass, "min_filter_bits", VALUEFUNC(_wrap_stealth_address_min_filter_bits_get), 0);
  rb_define_singleton_method(SwigClassStealth_address.klass, "max_filter_bits", VALUEFUNC(_wrap_stealth_address_max_filter_bits_get), 0);
  rb_define_method(SwigClassStealth_address.klass, "<", VALUEFUNC(_wrap_stealth_address___lt__), -1);
  rb_define_method(SwigClassStealth_address.klass, "==", VALUEFUNC(_wrap_stealth_address___eq__), -1);
  rb_define_method(SwigClassStealth_address.klass, "present?", VALUEFUNC(_wrap_stealth_address_presentq___), -1);
  rb_define_method(SwigClassStealth_address.klass, "data_chunk", VALUEFUNC(_wrap_stealth_address_data_chunk), -1);
  rb_define_method(SwigClassStealth_address.klass, "encoded", VALUEFUNC(_wrap_stealth_address_encoded), -1);
  rb_define_method(SwigClassStealth_address.klass, "version", VALUEFUNC(_wrap_stealth_address_version), -1);
  rb_define_method(SwigClassStealth_address.klass, "scan_key", VALUEFUNC(_wrap_stealth_address_scan_key), -1);
  rb_define_method(SwigClassStealth_address.klass, "spend_keys", VALUEFUNC(_wrap_stealth_address_spend_keys), -1);
  rb_define_method(SwigClassStealth_address.klass, "signatures", VALUEFUNC(_wrap_stealth_address_signatures), -1);
  rb_define_method(SwigClassStealth_address.klass, "filter", VALUEFUNC(_wrap_stealth_address_filter), -1);
  rb_define_method(SwigClassStealth_address.klass, "to_chunk", VALUEFUNC(_wrap_stealth_address_to_chunk), -1);
  SwigClassStealth_address.mark = 0;
  SwigClassStealth_address.destroy = (void (*)(void *)) free_libbitcoin_wallet_stealth_address;
  SwigClassStealth_address.trackObjects = 0;
  
  SwigClassStealth_receiver.klass = rb_define_class_under(mLibbitcoin, "Stealth_receiver", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__stealth_receiver, (void *) &SwigClassStealth_receiver);
  rb_define_alloc_func(SwigClassStealth_receiver.klass, _wrap_stealth_receiver_allocate);
  rb_define_method(SwigClassStealth_receiver.klass, "initialize", VALUEFUNC(_wrap_new_stealth_receiver), -1);
  rb_define_method(SwigClassStealth_receiver.klass, "present?", VALUEFUNC(_wrap_stealth_receiver_presentq___), -1);
  rb_define_method(SwigClassStealth_receiver.klass, "stealth_address", VALUEFUNC(_wrap_stealth_receiver_stealth_address), -1);
  rb_define_method(SwigClassStealth_receiver.klass, "derive_address", VALUEFUNC(_wrap_stealth_receiver_derive_address), -1);
  rb_define_method(SwigClassStealth_receiver.klass, "derive_private", VALUEFUNC(_wrap_stealth_receiver_derive_private), -1);
  SwigClassStealth_receiver.mark = 0;
  SwigClassStealth_receiver.destroy = (void (*)(void *)) free_libbitcoin_wallet_stealth_receiver;
  SwigClassStealth_receiver.trackObjects = 0;
  
  SwigClassStealth_sender.klass = rb_define_class_under(mLibbitcoin, "Stealth_sender", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_libbitcoin__wallet__stealth_sender, (void *) &SwigClassStealth_sender);
  rb_define_alloc_func(SwigClassStealth_sender.klass, _wrap_stealth_sender_allocate);
  rb_define_method(SwigClassStealth_sender.klass, "initialize", VALUEFUNC(_wrap_new_stealth_sender), -1);
  rb_define_method(SwigClassStealth_sender.klass, "present?", VALUEFUNC(_wrap_stealth_sender_presentq___), -1);
  rb_define_method(SwigClassStealth_sender.klass, "stealth_script", VALUEFUNC(_wrap_stealth_sender_stealth_script), -1);
  rb_define_method(SwigClassStealth_sender.klass, "payment_address", VALUEFUNC(_wrap_stealth_sender_payment_address), -1);
  SwigClassStealth_sender.mark = 0;
  SwigClassStealth_sender.destroy = (void (*)(void *)) free_libbitcoin_wallet_stealth_sender;
  SwigClassStealth_sender.trackObjects = 0;
}

